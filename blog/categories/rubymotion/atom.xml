<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyMotion | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/rubymotion/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2013-02-19T15:45:43-06:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatic ctags with RubyMotion and Vim]]></title>
    <link href="http://RayHightower.com/blog/2013/02/12/automatic-ctags-with-rubymotion-and-vim/"/>
    <updated>2013-02-12T19:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/12/automatic-ctags-with-rubymotion-and-vim</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> includes a <code>rake</code> task that generates <a href="http://ctags.sourceforge.net/whatis.html">Exuberant Ctags</a>. To generate tags, run the following in the root directory of a RubyMotion project.</p>

<p><code>bash
$ rake ctags
</code></p>

<h4>Make Ctags Better With Automation</h4>

<p>Ctags make writing code more efficient. But we shouldn't have to type <code>$ rake ctags</code> every time we create a new RubyMotion project. This article shows how to use a shell script to generate ctags automatically every time you create a new RubyMotion app.</p>

<!-- more -->


<h4>How Ctags Save Time</h4>

<p>Ctags can save you time. For example, when creating a new class called <code>HomeViewController</code> that inherits from <code>UIViewController</code>, typing the first view characters of the superclass will produce the drop-down shown below.
<img src="http://RayHightower.com/images/uiviewcontroller.png" align="center" width="800" height="433" title="ctags RubyMotion Vim" alt="ctags RubyMotion Vim"></p>

<p>RubyMotion's implementation of ctags includes support for built-in iOS classes like UIViewController. The code completion and drop-downs offered by ctags will reduce keystrokes and errors, freeing the developer to focus on solving harder problems.</p>

<h4>Creating the Script</h4>

<p>Here's the script. You can use any name that suits you. My script is called <code>mmotion.command</code> (with two m's at the beginning to distinguish it from the standard <code>motion</code> command) and it's in the <code>~/bin/</code> directory.</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<h1>Create a RubyMotion app, change into the app's directory, and run ctags.</h1>

<h1>Written by Raymond T. Hightower on February 12, 2013</h1>

<p>echo "Creating a new RubyMotion app called:" $1
motion create $1
cd $1
echo "Creating ctags for the new RubyMotion app..."
rake ctags
echo "Opening the new app in Vim..."
mvim .
echo "To use the RubyMotion console, cd into the new directory:" $1
```
All of the work is done by by four lines. The remaining lines are comments or 'echos' that tell the user what's happening while the script is running.</p>

<h4>Running the Script</h4>

<p>If <code>~/bin/</code> is in the <code>$PATH</code>, you can run the script with the following line command:
<code>bash
$ mmotion.command [app name]
</code></p>

<p>Of course, we can still do better by leveraging the power of aliases in <code>~/.bash_profile</code>.</p>

<h4>Adding an Alias to ~/.bash_profile</h4>

<p>Dropping an alias into <code>~/.bash_profile</code> streamlines the process even more. You can use any alias you want as long as it doesn't confilct with another command. Here's what my alias looks like:</p>

<p><code>bash
alias mmotion="mmotion.command"
</code></p>

<h4>Taking the Script for a Spin</h4>

<p>Now we can build a new RubyMotion app called <code>NewApp</code> with these results:</p>

<p>``` bash
~/Code/Ruby/RubyMotion$ mmotion NewApp
Creating a new RubyMotion app called: NewApp</p>

<pre><code>Create NewApp
Create NewApp/.gitignore
Create NewApp/Rakefile
Create NewApp/app
Create NewApp/app/app_delegate.rb
Create NewApp/resources
Create NewApp/spec
Create NewApp/spec/main_spec.rb
</code></pre>

<p>Creating ctags for the new RubyMotion app...
Opening the new app in Vim...
To use the RubyMotion console, cd into the new directory: NewApp</p>

<p>~/Code/Ruby/RubyMotion$
```</p>

<p>After the bash script ends, it lands in the directory from which it was originally run, no matter what directories it changed to during execution. This script will open the new app in Vim when it's done.</p>

<p>From here, you can <code>$ cd NewApp</code> and type <code>rake</code> to run the app in the iOS simulator.</p>

<h4>Feedback Welcome</h4>

<p>If you notice any glitches with this approach, feel free to send me a "heads up" via the <a href="/contact/">contact</a> form on this site or in the blog comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Provisioning Profiles]]></title>
    <link href="http://RayHightower.com/blog/2012/12/26/rubymotion-provisioning-profiles/"/>
    <updated>2012-12-26T20:46:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/26/rubymotion-provisioning-profiles</id>
    <content type="html"><![CDATA[<p><em>Note: This article on provisioning profiles was first posted in the <a href="https://groups.google.com/forum/?fromgroups=#!topic/rubymotion/Nvo8dH_8rkI">RubyMotion Google Group</a> on May 10, 2012. It was also referenced on <a href="http://stackoverflow.com/questions/13539743/rubymotion-build-error-cant-find-a-provisioning-profile-named-mixios-tea">Stack Overflow</a>.</em></p>

<p>Everything with RubyMotion worked great until I tried to run the sample apps on a physical device. And then I had to spend a few hours wrestling with provisioning profiles. Hopefully this post will save time for somebody else.</p>

<!-- more -->


<p>In order to successfully run a RubyMotion app on a non-jailbroken iPhone 3GS (via <code>$ rake device</code>) I had to:</p>

<ul>
<li>Delete all of the expired provisioning profiles in the Mac OS X Keychain Access app. Yeah, my past is littered with many random experiments :-)</li>
<li>Explicitly set the path to my provisioning profile in the rakefile for the app (the defaults didn't work for me).</li>
<li>Explicitly set the name of my codesign_certificate.</li>
</ul>


<p>The default "iOS Team Profile" didn't work for me. I had to set explicit values in my rakefile for the app. Here's my rakefile for the <a href="https://github.com/HipByte/RubyMotionSamples/tree/master/Tweets">'Tweets' sample app</a>:</p>

<p><code>ruby
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
Motion::Project::App.setup do |app| # Use `rake config' to see complete project settings.
  app.name = 'Tweets'
  app.provisioning_profile = '/Users/[username]/Library/ MobileDevice/Provisioning Profiles/[string-of-numbers].mobileprovision'
  app.codesign_certificate = 'iPhone Developer: John Q Developer (A5QZ9QF4Z1)'
end
</code></p>

<p>Of course, my name isn't "John Q Developer", but you get the idea. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Makers, Objective-C, and RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion/"/>
    <updated>2012-12-14T06:45:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/ipad-iphone.jpg" width="256" height="250" alt="iPad iPhone" title="iPad iPhone" align="right">
This week I enrolled in the iOS Accelerated course offered by the <a href="http://mobilemakers.co/ios-accelerated">Mobile Makers Academy</a>. If you would like to do the same, mention my name and we'll both receive a $300 discount on tuition.</p>

<p>Class starts on Jan 7, 2013. The evening lectures are convenient for those who serve clients by day.</p>

<p>Of course, a tuition discount and easy schedule are poor reasons to enroll in a course. This article will describe my reasons for enrolling. If your thirst for learning is anything like mine, you might like Mobile Makers too.</p>

<!--more-->


<h4>Background and Expectations</h4>

<p>My background includes an undergrad degree in computer science. Over the years, I've coded in C, Lisp, Fortran, Pascal, x86 assembler, and Ruby. I became a "business guy" when I launched WisdomGroup eighteen years ago. WisdomGroup is fortunate to have a team of strong technologists who keep our clients happy while teaching me more every day.</p>

<p>In late 2011, I began to focus on sharpening my personal technical skills, and that led to my immersion in <a href="/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> this year. I expect the Mobile Makers experience to strengthen my grasp of Objective-C, OO theory, and iOS. Cross-training with Objective-C will boost my RubyMotion skills as well.</p>

<h4>Instruction Format</h4>

<p><a href="https://twitter.com/dbora">Don Bora</a> is the head instructor at Mobile Makers. Don is embarrassed when I say this, but he's the main reason why I chose to enroll. Don is a true polyglot programmer, with a background that includes Objective-C (of course!), C#, Java, Ruby, and Smalltalk among other languages. He currently builds Objective-C apps for his clients at <a href="http://eightbitstudios.com/">Eight Bit Studios</a>. Don holds degrees in computer science and linguistics.</p>

<p>Mobile Makers offers a learning format that is relatively new to me. Beyond the traditional classroom lectures, students get plenty of time for lab immersion and interaction with mentors. I first witnessed this format when Neal Sales-Griffin and Mike McGee launched <a href="http://starterleague.com">The Starter League</a>.</p>

<h4>More About Lab Time and Mentorship</h4>

<p>Classroom sessions are fine, but they're not enough. Can you learn a musical instrument by listening to lectures and taking notes? Mastering a skill like software development requires deliberate practice with challenging exercises. Learning is accelerated when lectures, labs, and mentorship complement each other.</p>

<h4>Learning Architecture</h4>

<p>Behind the scenes, Adam Lupu is the learning architect who designed the Mobile Makers curriculum. In Don's words: "I know how to explain things, but I don't know how to structure a course. That's where Adam comes in." Adam was the lead architect behind the Rails-based curriculum at the Starter League. Now he's building the mobile curriculum at Mobile Makers.</p>

<h4>Excitement</h4>

<p>The Mobile Makers <a href="http://mobilemakers.co/ios-accelerated">iOS Accelerated</a> class is only three weeks away. If you mention this blog post, you and I will both get a $300 tuition discount. More important, we will acquire skills that will serve us well as we solve problems for clients. What an exciting time to be a developer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building iOS Apps With RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/"/>
    <updated>2012-10-29T18:49:00-05:00</updated>
    <id>http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion</id>
    <content type="html"><![CDATA[<p>Special thanks to the organizers of <a href="http://magic-ruby.com/">MagicRuby</a> and <a href="http://aloharubyconf.com/">Aloha Ruby</a> for inviting me to present RubyMotion at their respective conferences. <a href="http://confreaks.com/videos/1245-aloharuby2012-building-ios-apps-with-rubymotion">Confreaks</a> recorded video at the Aloha Ruby event.</p>

<center>
<iframe name="rubymotionaloha" width="560" height="315" src="http://www.youtube.com/embed/3gCsen5Zs4s" frameborder="0" allowfullscreen></iframe>
</center>


<p>The fizzbuzz sample code can be found on <a href="https://github.com/RayHightower/fizzbuzzrm">GitHub</a>. Slides are on <a href="https://speakerdeck.com/rayhightower/building-ios-apps-with-rubymotion">SpeakerDeck</a>.</p>

<p>Should you use RubyMotion or Objective-C for iOS development? That depends...</p>

<!--more-->


<p>If your team is currently building web apps, and they happen to be Ruby-focused, then RubyMotion will enable you to create a <a href="http://rayhightower.com/blog/2012/08/31/four-steps-five-minutes/">minimum viable product (MVP)</a> using skills that you already have in-house. However, if your team is currently Objective-C focused, it may be easier for you to build your MVP in Objective-C.</p>

<p>Keep in mind that I am Ruby-biased, so I see advantages on the RubyMotion side of the question. Building the web <em>and</em> mobile pieces of an app in the same language means that expertise can be readily shared throughout the team. Shared expertise makes the team stronger.</p>

<p>Thanks again to MagicRuby and Aloha Ruby for asking me to speak, and to Confreaks for recording the talk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RubyMotion With Xcode's Interface Builder]]></title>
    <link href="http://RayHightower.com/blog/2012/10/18/using-rubymotion-with-interface-builder/"/>
    <updated>2012-10-18T18:34:00-05:00</updated>
    <id>http://RayHightower.com/blog/2012/10/18/using-rubymotion-with-interface-builder</id>
    <content type="html"><![CDATA[<h4>Executive Summary</h4>

<p><a href="http://www.rubymotion.com/">RubyMotion</a> is a Mac application that lets developers write iOS apps in
Ruby. It's possible to create the user interface for the app entirely
within RubyMotion or with a Ruby gem like <a href="https://github.com/rubymotion/teacup">Teacup</a>. But what about devs who prefer Interface Builder?</p>

<p>This article will show how to use Xcode's Interface Builder to create a basic UI for
a RubyMotion application.</p>

<!-- more -->


<p><img src="http://RayHightower.com/assets/fizzbuzzrm.png" width = "200" align = "right"
alt="Interface Builder with RubyMotion" title="Interface Builder with RubyMotion"></p>

<h4>Our Sample App: FizzBuzz</h4>

<p>For this example we will build an iOS app that calculates and displays
the fizzbuzz function. As a refresher, here's the fizzbuzz algorithm:</p>

<ol>
<li>Count integers starting with 1 and incrementing as high as the user wants to go.</li>
<li>If the integer to be displayed is a multiple of 3, display "fizz" instead.</li>
<li>If the integer to be displayed is a multiple of 5, display "buzz" instead.</li>
<li>If the integer to be displayed is a multiple of both 3 and 5 (i.e. a multiple of 15) display "fizzbuzz".</li>
</ol>


<p>The bare-bones UI appears at right. The plus sign increments the
counter, minius decrements it, and the label area shows "Begin" at
the beginning.</p>

<h4>First, Build the RubyMotion App</h4>

<p>We start by building the fizzbuzz app in RubyMotion.</p>

<p><code>
$ motion create fizzbuzzrm
</code></p>

<p>The code for the finished app can be found on <a href="http://github.com/rayhightower/fizzbuzzrm">GitHub</a>.</p>

<h4>Build the UI in Interface Builder</h4>

<p>Next, build the UI in Xcode's Interface Builder.</p>

<p>After completing the interface, we will need to asign tags to each
element so that the UI knows how to communicate with RubyMotion. Scroll
down to View|Tag in the rightmost colum (screenshot below). In this
example, I assigned the tags 1, 2, 3, and 4 to the label, plus button,
minus button, and reset, respectively.
<img src="http://RayHightower.com/assets/tag1.png" alt="Interface Builder With RubyMotion" title="Interface Builder with RubyMotion"></p>

<p>Save the IB file in the <code>/resources</code> directory of your
RubyMotion project. In my example, I called the file
<code>fbib.xib</code>. RubyMotion will compile the .xib file next time
you run the rake command to build the app.</p>

<h4>Connecting the .xib file to the RubyMotion App</h4>

<p>Let's head back to the RubyMotion app so we can tell RubyMotion how to
interact with the IB file. Note that we specify the name of the IB file
on the second line of the <code>loadView</code> method.</p>

<p>``` ruby
  def loadView</p>

<pre><code>views = NSBundle.mainBundle.loadNibNamed "fbib", owner:self, options:nil
self.view = views[0]
@counter = 0
@view_handle = self.view
</code></pre>

<p>  end
```</p>

<p>The <code>viewDidLoad</code> method is where we assign buttons to their corresponding
methods, and we specify how the app should behave when each button is
pressed.</p>

<p>``` ruby
  def viewDidLoad</p>

<pre><code>@label = view.viewWithTag 1
plus_button = view.viewWithTag 2
minus_button = view.viewWithTag 3
reset_button = view.viewWithTag 4
# background_area = view.viewWithTag 5

plus_button.addTarget(self, action:'plusTapped:', forControlEvents:UIControlEventTouchUpInside)
minus_button.addTarget(self, action:'minusTapped:', forControlEvents:UIControlEventTouchUpInside)
reset_button.addTarget(self, action:'resetTapped:', forControlEvents:UIControlEventTouchUpInside)
# background_area.addTarget(self, action:'backgroundTapped:', forControlEvents:UIControlEventTouchUpInside)
</code></pre>

<p>  end
```</p>

<p>And finally, let's define a method for each button.</p>

<p>``` ruby
  def plusTapped(sender)</p>

<pre><code>@counter += 1
@label.text = FizzBuzzViewController.fbcalc(@counter).to_s
</code></pre>

<p>  end</p>

<p>  def minusTapped(sender)</p>

<pre><code>@counter -= 1
@label.text = FizzBuzzViewController.fbcalc(@counter).to_s
</code></pre>

<p>  end</p>

<p>  def resetTapped(sender)</p>

<pre><code>@counter = 0
@label.text = "Begin"

rotate_background(@view_handle)
</code></pre>

<p>  end</p>

<p>  def rotate_background(view_handle)</p>

<pre><code>@color_index ||= 0

case @color_index
when 0
  @view_handle.backgroundColor = UIColor.redColor
when 1
  @view_handle.backgroundColor = UIColor.greenColor
when 2
  @view_handle.backgroundColor = UIColor.blueColor
when 3
  @view_handle.backgroundColor = UIColor.yellowColor
end

@color_index = (@color_index +1) % 4
</code></pre>

<p>  end
```</p>

<h4>Rake</h4>

<p>Run <code>$ rake</code> to compile and execute the app.</p>

<p>Note the surprise when you hit the Reset button in the app. This
surprise is one reason why you should always have a designer on your
dev team!</p>

<h4>Conclusion</h4>

<p>The more familiar I become with RubyMotion, the more I learn that there
are multiple ways to do things, especially when it comes to UI. If you
have ideas or suggestions for a different approach, feel free to dash
me a message through the <a href="http://RayHightower.com/contact">Contact Form</a>. Thanks!</p>
]]></content>
  </entry>
  
</feed>
