<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2013-07-15T14:04:03-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BeagleBone Black, Up & Running]]></title>
    <link href="http://RayHightower.com/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/"/>
    <updated>2013-05-22T22:13:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/05/22/beaglebone-black-running-ruby-on-rails</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/BeagleBoneBlack.jpg" width="372" height="600" title="BeagleBone Black" alt="BeagleBone Black" align="right">
<a href="http://beagleboard.org/Products/BeagleBone%20Black">BeagleBone Black</a>, like the <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a>, is a small, inexpensive computer that runs Linux. It's smaller than a deck of cards and you can buy one for about forty-five dollars ($45.00). The device is made by <a href="http://circuitco.com">CircuitCo</a> in Richardson, TX, USA.</p>

<h3>It Just Works</h3>

<p>BeagleBone Black runs Linux right out of the box. Steps required:</p>

<ul>
<li>Plug in the micro-HDMI cable for the monitor. See the "Gotchas"
section about micro-HDMI below.</li>
<li>Plug in the keyboard &amp; mouse via the USB port. You might need a USB hub because the board only has one USB port.</li>
<li>Add power via the mini-USB port or the 5v power connection.</li>
</ul>


<p>After a few minutes of boot time, we have a fully-functioning Linux computer with a GUI, Firefox browser, and other tools.</p>

<!--more-->


<p>The BeagleBone Black has 2GB of flash storage on the board, and part
of that is used for Linux. Here's a screenshot after just a few minutes of ownership.</p>

<center><img src="http://RayHightower.com/images/BeagleBoneBlack-WindyCityRails.png" width="600" height="338" title="BeagleBone Black Firefox WindyCityRails" alt="BeagleBone Black Firefox WindyCityRails" align="center"></center>


<h3>Documentation</h3>

<p><img src="http://RayHightower.com/images/BeagleBoneBlack-USB.png" width="250" height="200" title="BeagleBone Black USB" alt="BeagleBone Black USB" align="right">
All of the paper documentation for the BeagleBone Black fits on a slip of paper roughly the size of two business cards. The meat of the documentation resides on the device itself. To reach the electronic documentation:</p>

<ol>
<li>Plug the BeagleBone Black into a USB port on your laptop.</li>
<li>The board will appear as a USB storage device. One of the files at the
root of the storage device, <code>START.htm</code>, contains the documentation. It
can be viewed in a web browser.</li>
</ol>


<p>The documentation recommends against <a href="http://en.wikipedia.org/wiki/Internet_Explorer">MSIE</a>.</p>

<h3>Gotchas</h3>

<p><img src="http://RayHightower.com/images/micro-HDMI-home-depot.jpg" width="400" height="300" title="Micro HDMI Home Depot" alt="Micro HDMI Home Depot" align="right">
The manufacturer included a mini-USB cable with the device, so you can power it up right after you rip open the package. Gotcha: You need a micro-HDMI cable (or adapter) if you want to attach a monitor. I would have preferred a micro-HDMI-to-HDMI adapater in the box instead of the mini-USB cable. That's a little nit-picky on my part since micro-HDMI cables are easy to find at Home Depot.</p>

<p>A quick shout-out to Home Depot: Their store-brand cables let you test the cable end without opening the package, right in the store. Excellent package design by Home Depot.</p>

<p>My second "gotcha" is more important: The <code>curl</code> command did not behave as flawlessly as it did with the Raspberry Pi, so I was not able to install Ruby as quickly as planned. Details below.</p>

<h3>Installing Rails</h3>

<p>I will have to cover Ruby and Rails installation in a future blog post because my initial attempts were not successful. <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">RVM, Ruby, and Rails installed easily with Raspberry Pi</a>, even though the compilation time was long. With the BeagleBone Black, I received the following in response to the <code>curl</code> command:</p>

<p>```bash
sh-4.2# curl -L https://get.rvm.io | bash -s stable --ruby
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
curl: (77) Problem with the SSL CA cert (path? access rights?)
sh-4.2#
```</p>

<p>Maybe it's time to try <a href="https://github.com/sstephenson/rbenv">RBEnv</a>? I'll post a solution when I find it. Or... if a reader of this blog already has a solution for the BeagleBone Black Rails installation challenge, please post in the comments below and I'll credit you here.</p>

<h4>BeagleBone Black vs. Raspberry Pi</h4>

<p>Which is better, BeagleBone Black or Raspberry Pi? There's no clear winner in my opinion. It's a matter of trade-offs:</p>

<ul>
<li>The 'Bone runs Linux right out of the box, while it takes some time to get Linux running on the Pi, unless you buy a card pre-configured for the Pi.</li>
<li>RVM, Ruby, and Rails installation was painless on the Pi even though compilation time was long. The jury is still out w/r/t RVM on the 'Bone.</li>
<li>Cost-wise, they're within ten bucks of each other. That's a wash.</li>
<li>The 'Bone has more Ardunio-like provisions for digital projects.</li>
<li>The Pi includes an RCA output for older TVs. Plus the Pi uses standard HDMI, so there's no need to get a special micro-HDMI cable.</li>
</ul>


<p>I've owned my 'Bone for just over 24 hours. Lots more to learn. Looking forward to it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading Ruby With RVM]]></title>
    <link href="http://RayHightower.com/blog/2013/05/16/upgrading-ruby-with-rvm/"/>
    <updated>2013-05-16T13:36:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/05/16/upgrading-ruby-with-rvm</id>
    <content type="html"><![CDATA[<p><a href="http://rvm.io">Ruby Version Manager (RVM)</a> is one of my favorite tools in the Ruby ecosystem.  Reason: RVM lets me experiment with Ruby and Rails at will. I don't know about you, but my best experiments are full of risk so they eventually blow things up. When that happens, I can always recover the broken areas without wasting time on a full system restore.</p>

<p>Some devs choose to use another tool, <a href="https://github.com/sstephenson/rbenv">RBenv</a>, that serves a purpose similar to RVM. I began working with RVM before the other tools existed, and since it has always worked well for me, I have no reason to switch.</p>

<h4>Ruby 2.0.0-p195</h4>

<p>The latest patch of Ruby 2.0.0, p195, was released two days ago. Time to take it for a spin. RVM lets devs upgrade Ruby and manage gemsets seamlessly. Here's how the process went.</p>

<!--more-->


<h4>Get the Latest RVM</h4>

<p>Instructions for installing RVM are at <a href="http://rvm.io">http://rvm.io</a>.
If you already have RVM installed, you should confirm that you have the
latest version.</p>

<p><code>bash
$ rvm get head
</code></p>

<h4>Grab the Ruby Patch</h4>

<p>With the latest RVM installed, you can upgrade to the latest Ruby
patch level.</p>

<p><code>bash
$ rvm upgrade 2.0.0
Are you sure you wish to upgrade from ruby-2.0.0-p0 to ruby-2.0.0-p195? (Y/n): y
Installing new ruby ruby-2.0.0-p195
Searching for binary rubies, this might take some time.
</code></p>

<p>The process took at least twenty minutes on my system. I don't have an exact time because I began working on other tasks during the upgrade, and when I looked back at the terminal window, the process was mostly complete, except for a few questions about gemsets...</p>

<p><code>bash
Migrating gems from ruby-2.0.0-p0 to ruby-2.0.0-p195
Are you sure you wish to MOVE gems from ruby-2.0.0-p0 to ruby-2.0.0-p195?
This will overwrite existing gems in ruby-2.0.0-p195 and remove them from ruby-2.0.0-p0 (Y/n): y
Moving gemsets...
</code>
...and aliases, wrappers, and archiving my patchless Ruby 2.0.0.</p>

<p>```bash
Do you wish to move over aliases? (Y/n): y
Do you wish to move over wrappers? (Y/n): y
Do you also wish to completely remove ruby-2.0.0-p0 (inc. archive)? (Y/n): y
Removing ruby-2.0.0-p0........
Successfully migrated ruby-2.0.0-p0 to ruby-2.0.0-p195
Upgrade complete!</p>

<p>$
```</p>

<p>Upgrade complete. Now running the latest patch of Ruby 2.0.0-p195</p>

<p>```bash
~$ rvm list</p>

<p>rvm rubies</p>

<p>   macruby-0.12 [ i686 ]
   ruby-1.8.7-p334 [ i686 ]
   ruby-1.9.2-p290 [ x86_64 ]
 * ruby-1.9.3-p385 [ x86_64 ]
   ruby-2.0.0-p195 [ x86_64 ]</p>

<h1>=> - current</h1>

<h1>=* - current &amp;&amp; default</h1>

<h1>* - default</h1>

<p>```</p>

<p>As a final option, I chose to make this latest Ruby patch my default.</p>

<p>```bash</p>

<p>~$ rvm use ruby-2.0.0 --default
Using /Users/rth/.rvm/gems/ruby-2.0.0-p195</p>

<p>~$ rvm list</p>

<p>rvm rubies</p>

<p>   macruby-0.12 [ i686 ]
   ruby-1.8.7-p334 [ i686 ]
   ruby-1.9.2-p290 [ x86_64 ]
   ruby-1.9.3-p385 [ x86_64 ]
=* ruby-2.0.0-p195 [ x86_64 ]</p>

<h1>=> - current</h1>

<h1>=* - current &amp;&amp; default</h1>

<h1>* - default</h1>

<p>~$
```
And that's it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ack 2.0: Written in Perl, Useful With Ruby]]></title>
    <link href="http://RayHightower.com/blog/2013/04/20/ack-written-in-perl-useful-with-ruby/"/>
    <updated>2013-04-20T17:12:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/04/20/ack-written-in-perl-useful-with-ruby</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/ack.png" align="right" height="237" width="230" alt="Ack Linux Mac OS X" title="Ack Linux Mac OS X"></p>

<p><a href="http://beyondgrep.com/">Ack</a> is an open source command line tool that lets developers search large trees of source code very quickly. If you are looking for a method definition in a haystack of files, Ack will find that needle for you. Many devs regard Ack as a replacement for <a href="http://en.wikipedia.org/wiki/Grep">grep</a>.</p>

<p>The Elmhurst <a href="http://chicagoruby.org">ChicagoRuby</a> meetings are always a source of unexpected learning. Today ChicagoRuby welcomed <a href="http://twitter.com/petdance">Andy Lester</a>, creator of Ack. Andy released Ack 2.0 two days ago. He shared some of the latest features in an impromptu demo.</p>

<!--more-->


<h4>Why Ack?</h4>

<p>Have you ever been working on a project, only to be interrupted when you need to look for something? It could be a method name, a variable declaration, or a string of text in a comment. A minor distraction costs you the time it takes to search plus the time required to re-focus.</p>

<p>All of us are more productive when we stay <em>in the zone</em>. Ack helps devs to maintain focus and thereby produce better results.</p>

<h4>First, Install Perl</h4>

<p>Ack requires the <a href="http://en.wikipedia.org/wiki/Perl">Perl</a> programming language. Perl comes pre-installed on Mac OS X and most Linux distros. If you're running on a 'nix platform, you probably have Perl already.</p>

<p>Windows installations are beyond the scope of this article. If you're running Windows, you might consider a Linux VM for Ruby and Rails-related work.</p>

<h4>Installing Ack on Mac OS X</h4>

<p>Installing Ack is so easy that it almost feels wrong: Grab Ack in a single Perl file and drop it in your <code>~/bin/</code> directory. That's it.</p>

<p>Ack can also be installed via <a href="http://mxcl.github.io/homebrew/">Homebrew</a>, but I prefer the <em>drop it in ~/bin</em> installation since everything is contained in one file. Here's a more detailed version of the steps:</p>

<ol>
<li>If you don't have one already, create <code>~/bin/</code> as a subdirectory of your home directory.</li>
<li>Grab a the single-file copy of Ack from <a href="http://beyondgrep.com/">http://beyondgrep.com/ </a></li>
<li>Drop the single-file copy of Ack into a file called <code>~/bin/ack</code></li>
<li>Make sure that <code>$HOME/bin:</code> appears at the beginning of your <code>$PATH</code> environment variable.</li>
</ol>


<p>At this point you should be running Ack v2.0 or later. To verify:</p>

<p>```bash
~/bin$ ack --version
ack 2.02 (git commit f3c8827)
Running under Perl 5.12.4 at /usr/bin/perl</p>

<p>Copyright 2005-2013 Andy Lester.</p>

<p>This program is free software.  You may modify or distribute it
under the terms of the Artistic License v2.0.</p>

<p>~/bin$
```</p>

<p>Installation complete. Now, let's take Ack for a spin.</p>

<h4>Using Ack at the Command Line</h4>

<p>For a sample project, let's use <code>demo_app</code> from Michael Hartl's <a href="http://rubyonrailstutorial.com">Ruby on
Rails Tutorial</a>. Imagine that you want
to find every file in the project that references <code>user_id</code>. How would
you do that?
<img src="http://RayHightower.com/images/ack_user_id.png" align="center" height="650" width="887" alt="Ack command line demo" title="Ack command line demo"></p>

<p>Fast, clear, and highlighted in color. Bonus: If you're a Vim user,
try <a href="https://github.com/mileszs/ack.vim">ack.vim</a> if you want to run Ack
without leaving your editor.</p>

<h4>The Bottom Line</h4>

<p>Ack helps devs to find things quicker without leaving the zone. Try it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New RVM Behavior With .ruby-version and .ruby-gemset]]></title>
    <link href="http://RayHightower.com/blog/2013/04/18/new-rvm-behavior-ruby-version-ruby-gemset/"/>
    <updated>2013-04-18T20:33:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/04/18/new-rvm-behavior-ruby-version-ruby-gemset</id>
    <content type="html"><![CDATA[<p><a href="http://RayHightower.com/blog/2013/04/18/new-rvm-behavior-ruby-version-ruby-gemset/"><img src="http://RayHightower.com/images/rvm.png" height="98" width="89" align="right" alt="RVM .ruby-version .ruby-gemset" title="RVM .ruby-version .ruby-gemset"></a>
I trust <a href="http://rvm.io">RVM</a> to manage my Ruby versions and my gemsets. So when I saw an unexpected change in RVM's behavior, I was concerned about a possible disruption in my workflow.</p>

<!--more-->


<h4>A New RVM Message</h4>

<p>Here's the message I received when I changed into <code>mydirectory/</code>:</p>

<p>```bash
~/Code/Ruby/apps/$ cd mydirectory/
You are using '.rvmrc', it requires trusting, it is slower and it is not
compatible with other ruby managers, you can switch to '.ruby-version'
using 'rvm rvmrc to [.]ruby-version' or ignore this warnings with
'rvm rvmrc warning ignore ~/Code/Ruby/apps/mydirectory/.rvmrc',
'.rvmrc' will continue to be the default project file in RVM 1 and RVM 2,
to ignore the warning for all files run
'rvm rvmrc warning ignore all .rvmrcs'.</p>

<p>~/Code/Ruby/apps/mydirectory[master]$
```</p>

<h4>Decision: Do the Update</h4>

<p>Ignoring a warning feels like sticking my head in the sand. It's better to face things head-on. So I decided to go with the update. If things don't work out, I can always remove RVM completely and start from scratch.</p>

<p>```bash
~/Code/Ruby/apps/mydirectory[master]$ rvm rvmrc to .ruby-version</p>

<p><code>
My shell responded by repeating the `.rvmrc` vs `.ruby-version` notice. But when I examine the directory, everything looks good.
</code>bash
total 56
drwx---rwx   53 rth  wheel   1802 Apr 19 07:18 .
drwx---rwx   27 rth  wheel    918 Feb 10 08:26 ..
-rw-r--r--    1 rth  wheel    175 Feb  4 13:41 .gitignore
-rw-r--r--@   1 rth  wheel      0 Oct 15  2012 .repl_history
-rw-r--r--    1 rth  wheel     11 Apr 19 07:18 .ruby-gemset
-rw-r--r--    1 rth  wheel     16 Apr 19 07:18 .ruby-version
drwxr-xr-x   10 rth  wheel    340 Feb 14 20:41 AFNetworking-RubyMotion-Example
drwxr-xr-x   13 rth  wheel    442 Feb 24 17:29 AccordionUIView
```</p>

<p>Instead of a single <code>.rvmrc</code> file, Ruby versions are managed by
<code>.ruby-version</code> while gemsets are managed through <code>.ruby-gemset</code>.</p>

<h4>Bash Alias</h4>

<p>Next, it's time to clean things up by adding an <code>alias</code> to
<code>~/.bash_profile</code>.
<code>bash
alias newrvm="rvm rvmrc to .ruby-version"
</code></p>

<p>Tell the terminal session to use the new <code>~/.bash_profile</code> with
<code>bash
$ source ~/.bash_profile
</code></p>

<p>And now we can begin using <code>.ruby-version</code> and <code>.ruby-gemset</code> in any .rvmrc-equipped directory with a simple one-word command.
<code>bash
$ newrvm
</code></p>

<h4>Feedback Welcome</h4>

<p>If you notice any snags (including typos) in the above procedure, please reach out via the comments below or through <a href="http://twitter.com/rayhightower">Twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atari's Pong, Built With RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2013/02/26/atari-pong-rubymotion-objective-c/"/>
    <updated>2013-02-26T10:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/26/atari-pong-rubymotion-objective-c</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/pong-rubymotion-objective-c.png" width="300" height="160" alt="Atari's Pong in RubyMotion and Objective-C" title="Atari's Pong in RubyMotion and Objective-C" align="right">
<a href="http://en.wikipedia.org/wiki/Pong">Atari's Pong</a> is a classic video arcade game from the 1970s. Seeing Pong always gives me childhood flashbacks.</p>

<h4>Pong in Objective-C</h4>

<p>I recently completed the <a href="http://mobilemakers.co/ios-accelerated">iOS Accelerated</a> course at the <a href="http://mobilemakers.co/">Mobile Makers Academy</a>. For one of our homework assignments, we were asked to build a version of Pong that runs on iOS. Our instructor, <a href="http://twitter.com/dbora">Don Bora</a>, started us off with some skeleton code in Objective-C. Each student had to take Don's code and:</p>

<ul>
<li>Add paddles.</li>
<li>Make the paddles move on their own.</li>
<li>Make the ball bounce off the moving paddles.</li>
<li>Keep score.</li>
<li>Let one or two players control the paddles via touch.</li>
</ul>


<!-- more -->


<h4>Questions to Consider</h4>

<p>How do you determine whether the pixels of the ball have collided with the pixels of a paddle? What about wall collisions? When a collision occurs, where should the ball bounce next? As with any application, there are many details to consider.</p>

<h4>Building Blocks</h4>

<p>Of course, Don had already introduced the necessary skills in earlier lectures, labs, and homework. It was our job to put the pieces together.</p>

<p>Members of the class paired with each other. We shared solutions and advice. In time, we each ended up with a working version of Pong in Objective-C. It's exciting to see a favorite childhood game running in the iOS simulator on your own machine, especially if you built the game yourself.</p>

<h4>Pong in RubyMotion</h4>

<p>Since my day job revolves around Ruby, it made sense to re-write the exercise in <a href="http://rayhightower.dev/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>. Here are video clips of my two solutions. The first was written in Objective-C during the Mobile Makers course. The second was written in RubyMotion.</p>

<center><iframe name="pong-oc" width="560" height="315" src="http://www.youtube.com/embed/9LETiMdi9jQ?rel=0" frameborder="0" allowfullscreen></iframe></iframe></center>




<center><iframe name="pong-rm" width="560" height="315" src="http://www.youtube.com/embed/Lt-JKqiA_fg?rel=0" frameborder="0" allowfullscreen></iframe></center>


<p>As expected, the two solutions look similar. Source code is on GitHub:</p>

<ul>
<li><a href="http://github.com/rayhightower/pong-oc">Pong in Objective-C</a></li>
<li><a href="http://github.com/rayhightower/pong-rm">Pong in RubyMotion</a></li>
</ul>


<h4>RubyMotion Gotchas</h4>

<p>I encountered a few RubyMotion snags during development:</p>

<ul>
<li><p><em>Mouseovers Ingored</em>. Normally, when running the simulator with RubyMotion, you can mouse over an object in the simulator, hit the command key, and grab a handle to the object.  This behavior was absent in landcape mode with version 1.31 of RubyMotion. The release notes for version 1.33 mention that the problem has been solved. However, that was not my experience.</p></li>
<li><p><em>Touch Events Ignored on Part of Screen</em>. For some reason, the simulator ignored touch events on the right side of the screen. When I programatically moved the right paddle closer to the left side of the screen, both paddles responded to touch events. Searches of Google and Stack Overflow reveal that others have encounterd the same issue with touch events, especially in landcape mode.</p></li>
</ul>


<p><em>Update (3/13/2013): The issue with touch events has been resolved, thanks to advice from Turki Al-Qusaimi in the comments below. Updated code has been pushed to the <a href="https://github.com/RayHightower/pong-rm">master branch on GitHub</a>.</em></p>

<p>Of course, I introduced a few bugs of my own while developing the Pong game. At one point, the velocity of the ball increased every time a player scored. It made the game exciting! But I didn't know the cause of the acceleration, and good developers strive to maintain better control over their projects.</p>

<p>I eventually found the acceleration problem: When using an NSTimer object to control animation, you have to invalidate the timer at the beginning of each cycle, or the animation will accelerate. That's a useful thing to know.</p>

<p>The rest of my work in RubyMotion went well, and I continue to enjoy the product. I plan to update the code once the touch event issues have been resolved.</p>

<h4>Why Play Games?</h4>

<p>Why should a serious developer spend time writing games? I can think of a few reasons:</p>

<ul>
<li><p>Writing a game challenges our skills on many levels. In the case of Pong, we have to dust off our old physics and geometry textbooks to ensure that the ball bounces like a real ball.</p></li>
<li><p>Writing a game lets us break out of our constraints. Devs who write business apps are very familiar with constraints.</p></li>
<li><p>Because writing a game is fun.</p></li>
</ul>


<p>Of course, the most important reason was given by a captain of the USS Enterprise NCC-1701:</p>

<blockquote><p>The more advanced the mind, the greater the need for the simplicity of play.
<br/>~James T. Kirk</p></blockquote>

<h4>Room for Improvement</h4>

<p>Building the Pong game was an interesting exercise in testing the capabilities of RubyMotion. Having done the work, I can look back and see some areas where I could improve the results. For example:</p>

<ul>
<li><p>Automated testing. These proof-of-concept exercises were done without automated testing. What is the best way to apply test driven development to a game? RubyMotion comes with a TDD framework, MacBacon. That would be a great subject for a future blog post.</p></li>
<li><p>Better design. Each exercise looks like something from the 1970s! How would Pong function if it was created in 2013?</p></li>
<li><p>Better collision detection. I'm using a built-in iOS method to detect ball collisions. The built-in detection works fine with the stationary walls, but not as well with the moving paddles. If I write a future version of Pong, I should also write a custom collision detection method.</p></li>
</ul>


<h4>Comments and Pull Requests</h4>

<p><a href="http://wisdomgroup.com">My team and I</a> build business apps. My gaming experience is limited. If you are a game developer, and if you see anything in my code that could be done better, your ideas are welcome. Feel free to submit a <a href="http://github.com/rayhightower/pong-rm">pull request via GitHub</a>, or you can drop a note in the comments below. Thanks!</p>
]]></content>
  </entry>
  
</feed>
