<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Education | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/education/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2013-05-16T14:15:31-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upgrading Ruby With RVM]]></title>
    <link href="http://RayHightower.com/blog/2013/05/16/upgrading-ruby-with-rvm/"/>
    <updated>2013-05-16T13:36:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/05/16/upgrading-ruby-with-rvm</id>
    <content type="html"><![CDATA[<p><a href="http://rvm.io">Ruby Version Manager (RVM)</a> is one of my favorite tools in the Ruby ecosystem.  Reason: RVM lets me experiment with Ruby and Rails at will. I don't know about you, but my best experiments are full of risk so they eventually blow things up. When that happens, I can always recover the broken areas without wasting time on a full system restore.</p>

<p>Some devs choose to use another tool, <a href="https://github.com/sstephenson/rbenv">RBenv</a>, that serves a purpose similar to RVM. I began working with RVM before the other tools existed, and since it has always worked well for me, I have no reason to switch.</p>

<h4>Ruby 2.0.0-p195</h4>

<p>The latest patch of Ruby 2.0.0, p195, was released two days ago. Time to take it for a spin. RVM lets devs upgrade Ruby and manage gemsets seamlessly. Here's how the process went.</p>

<!--more-->


<h4>Get the Latest RVM</h4>

<p>Instructions for installing RVM are at <a href="http://rvm.io">http://rvm.io</a>.
If you already have RVM installed, you should confirm that you have the
latest version.</p>

<p><code>bash
$ rvm get head
</code></p>

<h4>Grab the Ruby Patch</h4>

<p>With the latest RVM installed, you can upgrade to the latest Ruby
patch level.</p>

<p><code>bash
$ rvm upgrade 2.0.0
Are you sure you wish to upgrade from ruby-2.0.0-p0 to ruby-2.0.0-p195? (Y/n): y
Installing new ruby ruby-2.0.0-p195
Searching for binary rubies, this might take some time.
</code></p>

<p>The process took at least twenty minutes on my system. I don't have an exact time because I began working on other tasks during the upgrade, and when I looked back at the terminal window, the process was mostly complete, except for a few questions about gemsets...</p>

<p><code>bash
Migrating gems from ruby-2.0.0-p0 to ruby-2.0.0-p195
Are you sure you wish to MOVE gems from ruby-2.0.0-p0 to ruby-2.0.0-p195?
This will overwrite existing gems in ruby-2.0.0-p195 and remove them from ruby-2.0.0-p0 (Y/n): y
Moving gemsets...
</code>
...and aliases, wrappers, and archiving my patchless Ruby 2.0.0.</p>

<p>```bash
Do you wish to move over aliases? (Y/n): y
Do you wish to move over wrappers? (Y/n): y
Do you also wish to completely remove ruby-2.0.0-p0 (inc. archive)? (Y/n): y
Removing ruby-2.0.0-p0........
Successfully migrated ruby-2.0.0-p0 to ruby-2.0.0-p195
Upgrade complete!</p>

<p>$
```</p>

<p>Upgrade complete. Now running the latest patch of Ruby 2.0.0-p195</p>

<p>```bash
~$ rvm list</p>

<p>rvm rubies</p>

<p>   macruby-0.12 [ i686 ]
   ruby-1.8.7-p334 [ i686 ]
   ruby-1.9.2-p290 [ x86_64 ]
 * ruby-1.9.3-p385 [ x86_64 ]
   ruby-2.0.0-p195 [ x86_64 ]</p>

<h1>=> - current</h1>

<h1>=* - current &amp;&amp; default</h1>

<h1>* - default</h1>

<p>```</p>

<p>As a final option, I chose to make this latest Ruby patch my default.</p>

<p>```bash</p>

<p>~$ rvm use ruby-2.0.0 --default
Using /Users/rth/.rvm/gems/ruby-2.0.0-p195</p>

<p>~$ rvm list</p>

<p>rvm rubies</p>

<p>   macruby-0.12 [ i686 ]
   ruby-1.8.7-p334 [ i686 ]
   ruby-1.9.2-p290 [ x86_64 ]
   ruby-1.9.3-p385 [ x86_64 ]
=* ruby-2.0.0-p195 [ x86_64 ]</p>

<h1>=> - current</h1>

<h1>=* - current &amp;&amp; default</h1>

<h1>* - default</h1>

<p>~$
```
And that's it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ack 2.0: Written in Perl, Useful With Ruby]]></title>
    <link href="http://RayHightower.com/blog/2013/04/20/ack-written-in-perl-useful-with-ruby/"/>
    <updated>2013-04-20T17:12:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/04/20/ack-written-in-perl-useful-with-ruby</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/ack.png" align="right" height="237" width="230" alt="Ack Linux Mac OS X" title="Ack Linux Mac OS X"></p>

<p><a href="http://beyondgrep.com/">Ack</a> is an open source command line tool that lets developers search large trees of source code very quickly. If you are looking for a method definition in a haystack of files, Ack will find that needle for you. Many devs regard Ack as a replacement for <a href="http://en.wikipedia.org/wiki/Grep">grep</a>.</p>

<p>The Elmhurst <a href="http://chicagoruby.org">ChicagoRuby</a> meetings are always a source of unexpected learning. Today ChicagoRuby welcomed <a href="http://twitter.com/petdance">Andy Lester</a>, creator of Ack. Andy released Ack 2.0 two days ago. He shared some of the latest features in an impromptu demo.</p>

<!--more-->


<h4>Why Ack?</h4>

<p>Have you ever been working on a project, only to be interrupted when you need to look for something? It could be a method name, a variable declaration, or a string of text in a comment. A minor distraction costs you the time it takes to search plus the time required to re-focus.</p>

<p>All of us are more productive when we stay <em>in the zone</em>. Ack helps devs to maintain focus and thereby produce better results.</p>

<h4>First, Install Perl</h4>

<p>Ack requires the <a href="http://en.wikipedia.org/wiki/Perl">Perl</a> programming language. Perl comes pre-installed on Mac OS X and most Linux distros. If you're running on a 'nix platform, you probably have Perl already.</p>

<p>Windows installations are beyond the scope of this article. If you're running Windows, you might consider a Linux VM for Ruby and Rails-related work.</p>

<h4>Installing Ack on Mac OS X</h4>

<p>Installing Ack is so easy that it almost feels wrong: Grab Ack in a single Perl file and drop it in your <code>~/bin/</code> directory. That's it.</p>

<p>Ack can also be installed via <a href="http://mxcl.github.io/homebrew/">Homebrew</a>, but I prefer the <em>drop it in ~/bin</em> installation since everything is contained in one file. Here's a more detailed version of the steps:</p>

<ol>
<li>If you don't have one already, create <code>~/bin/</code> as a subdirectory of your home directory.</li>
<li>Grab a the single-file copy of Ack from <a href="http://beyondgrep.com/">http://beyondgrep.com/ </a></li>
<li>Drop the single-file copy of Ack into a file called <code>~/bin/ack</code></li>
<li>Make sure that <code>$HOME/bin:</code> appears at the beginning of your <code>$PATH</code> environment variable.</li>
</ol>


<p>At this point you should be running Ack v2.0 or later. To verify:</p>

<p>```bash
~/bin$ ack --version
ack 2.02 (git commit f3c8827)
Running under Perl 5.12.4 at /usr/bin/perl</p>

<p>Copyright 2005-2013 Andy Lester.</p>

<p>This program is free software.  You may modify or distribute it
under the terms of the Artistic License v2.0.</p>

<p>~/bin$
```</p>

<p>Installation complete. Now, let's take Ack for a spin.</p>

<h4>Using Ack at the Command Line</h4>

<p>For a sample project, let's use <code>demo_app</code> from Michael Hartl's <a href="http://rubyonrailstutorial.com">Ruby on
Rails Tutorial</a>. Imagine that you want
to find every file in the project that references <code>user_id</code>. How would
you do that?
<img src="http://RayHightower.com/images/ack_user_id.png" align="center" height="650" width="887" alt="Ack command line demo" title="Ack command line demo"></p>

<p>Fast, clear, and highlighted in color. Bonus: If you're a Vim user,
try <a href="https://github.com/mileszs/ack.vim">ack.vim</a> if you want to run Ack
without leaving your editor.</p>

<h4>The Bottom Line</h4>

<p>Ack helps devs to find things quicker without leaving the zone. Try it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elegant Code]]></title>
    <link href="http://RayHightower.com/blog/2013/04/12/elegant-code/"/>
    <updated>2013-04-12T13:34:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/04/12/elegant-code</id>
    <content type="html"><![CDATA[<p>This quote is too long to tweet, but too good to pass up:</p>

<blockquote><p>Ugly programs are like ugly suspension bridges: they're much more liable to collapse than pretty ones, because the way humans (especially engineer-humans) perceive beauty is intimately related to our ability to process and understand complexity. A language that makes it hard to write elegant code makes it hard to write good code.</p>

<p>~Eric S. Raymond, Author of The Cathedral and the Bazaar</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenges Make Us Stronger]]></title>
    <link href="http://RayHightower.com/blog/2013/03/25/challenges-make-us-stronger/"/>
    <updated>2013-03-25T09:37:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/03/25/challenges-make-us-stronger</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/moth.png" width="300" height="215" align="right" title="Emperor moth photo by Dean Morley" alt="Emperor moth photo by Dean Morley">
A man found a cocoon of an emperor moth. He took it home so that he could watch the moth come out of the cocoon. On the day a small opening appeared, he sat and watched the moth for several hours as the moth struggled to force its body through that little hole.</p>

<p>Then it seemed to stop making any progress. It appeared as if it had gotten as far as it could and it could go no farther. It just seemed to be stuck.</p>

<!--more-->


<h4>Kindness</h4>

<p>Then the man, in his kindness, decided to help the moth, so he took a pair of scissors and snipped off the remaining bit of the cocoon. The moth then emerged easily. But it had a swollen body and small, shriveled wings. The man continued to watch the moth because he expected that, at any moment, the wings would enlarge and expand to be able to support the body, which would contract in time. Neither happened! In fact, the little moth spent the rest of its life crawling around with a swollen body and shriveled body and shriveled wings. It never was able to fly.</p>

<h4>Helping vs. Understanding</h4>

<p>What the man in his kindness and haste did not understand was that the restricting cocoon and the struggle required for the moth to get through the tiny opening was the way of forcing fluid from the body of the moth into its wings so that it would be ready for flight once it achieved its freedom from the cocoon. Freedom and flight would only come after the struggle. By depriving the moth of a struggle, he deprived the moth of health.</p>

<h4>Obstacles and Growth</h4>

<p>Sometimes struggles are exactly what we need in our life. If we were to go through our life without any obstacles, we would be crippled. We would not be as strong as what we could have been. Give every opportunity a chance, and leave no room for regrets.</p>

<p><em>The author of this article is unknown. Emperor moth photo by <a href="http://www.flickr.com/photos/33465428@N02/7015602897/">Dean Morley</a></em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Can Do It Now]]></title>
    <link href="http://RayHightower.com/blog/2013/03/13/you-can-do-it-now/"/>
    <updated>2013-03-13T15:31:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/03/13/you-can-do-it-now</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/do_it_now.jpg" align="right" width="200" height="296" alt="You Can Do It Now" title="You Can Do It Now">
If you are fortunate enough to work in the technology industry, you do not need permission to move forward. So do it now.</p>

<p>Yes, you will have to define <em>it</em> for yourself.</p>

<h4>ChiPMA – Product Management</h4>

<p>A few years ago I had the pleasure of hearing <a href="http://www.youtube.com/watch?v=igsvMAU5POY">Suneel Gupta</a> speak at a Chicago Product Management Association meeting hosted by Pathfinder Development. Three points raised during Gupta’s talk:</p>

<ul>
<li>Conditions are never perfect. So start now.</li>
<li>What does <em>start</em> mean? Figure that out, and draw out the plan.</li>
<li>If you suck at first, keep going.</li>
<li>Conditions are never perfect.</li>
</ul>


<!-- more -->


<h4>Learning From History</h4>

<p>Gupta is a student of history. He began the talk by drawing parallels between today’s startup culture and the early days of powered flight.</p>

<p>In the late 1800s, Samuel Pierpont Langley was an accomplished engineer with great connections to money and resources. One of his lifelong goals was to develop a vehicle for powered flight. He built several successful models, hired the smartest collaborators he could find, and he even raised $50k (in 1898 dollars) from investors. Newspaper reporters followed his entourage as they conducted experiments. Surely, this team of thoroughbreds would solve the flight puzzle.</p>

<p>But most people have never heard of Langley. Somewhere in Ohio, far from the news outlets of the day, the Wright Brothers achieved the goal first. When Langley heard the news, he stopped trying.</p>

<p>Why did the Wright Brothers win? They never waited for perfect conditions. The Wright Brothers did what they could with the resources they had at the time. Maybe constraints are advantages in disguise.</p>

<h4>Draw Out the Plan</h4>

<p>Everybody has dreams. Something magical happens when we take the time to map out our dreams on paper.</p>

<p>Gupta’s example: Jack Dorsey, creator of Twitter. Dorsey drew the first mock-up for Twitter on paper. And then he showed it to people. Some laughed. Many gave feedback. He used the feedback to hone the idea into a viable product.</p>

<p>Until you put the idea on paper (or some other medium) so you can show it to potential customers and collaborators, you’ll never get the feedback you need to improve.</p>

<h4>Keep Going</h4>

<p>Gupta and his brother had an idea. They wanted to create videos about the first wave of Indians to move to America. They approached Hollywood experts about creating the videos.</p>

<p>"You’ll need at least $1 million," they were told. Much too expensive. Most people fold when facing a million dollar wall.</p>

<p>But Suneel and his brother made their own videos with the equipment they had available. The videos were not million-dollar productions. But here’s the upside: When they were done, they had something of substance that they could show to people. They posted their work at <a href="http://kahanimovement.com">KahaniMovement.com</a>. One viewer liked the site enough to send a link to Steven Spielberg.</p>

<p>Spielberg viewed the videos and he gave the brothers clear, actionable feedback. They made improvements. And they learned something interesting about Spielberg in the process: Even Spielberg starts with a loose cut sometimes! When Spielberg has a fresh idea that he’s trying to communicate, he will grab a hand-held camera, shoot the idea (no matter how rough) and show it to his team. If a picture is a thousand words, then a video is… you get the idea.</p>

<h4>Teachers &amp; Parents Ignite Our Passion</h4>

<p>Gupta shared a story about his 7th grade social studies class. The class watched a film of JFK delivering his inaugural speech in 1960. Gupta was moved. At the end of the film, the teacher informed that class that JFK had not written the speech. The author was Ted Sorensen, a man whom Kennedy called his <em>intellectual blood bank</em>.</p>

<p>In 7th grade, Gupta had found his calling. He would become a speech writer.</p>

<p>He went home and told his mother about his decision to become a speech writer. And that’s when his mother gave him a powerful piece of advice: "If you want to do that, you don’t have to wait. You can do it now."</p>

<p>You can do it now. What are you waiting for?</p>

<p><em>A version of this article was originally posted at <a href="http://wisdomgroup.com">http://wisdomgroup.com</a>.</em></p>
]]></content>
  </entry>
  
</feed>
