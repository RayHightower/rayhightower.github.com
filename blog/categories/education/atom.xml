<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Education | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/education/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2013-01-17T12:08:16-06:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I Use Vim]]></title>
    <link href="http://RayHightower.com/blog/2013/01/12/why-i-use-vim/"/>
    <updated>2013-01-12T11:07:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/12/why-i-use-vim</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/vim-osx.png" width="300" height="257" alt="Vim on OSX" title="Vim on OSX" align="right"/>
My primary code-writing tools are:</p>

<ul>
<li><a href="https://developer.apple.com/xcode/">Xcode</a> for Objective-C.</li>
<li><a href="http://code.google.com/p/macvim/">Vim</a> for Ruby, <a href="/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>, and everything else.</li>
</ul>


<p>Here are my reasons for using Vim, in priority order:</p>

<!--more-->


<ol>
<li><p>Vim is everywhere. I can find Vim on any &#39;nix-based machine: Unix, Linux, or OSX. I spend most of my time on OSX and the Ubuntu distribution of Linux. When I started experimenting with <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a>, it was pleasant to know that Vim was already there. Having a common editor on multiple platforms makes it easier to bounce between them.</p></li>
<li><p>Vim has history. I tried TextMate when I first heard about Ruby. Questions about TextMate's future caused me to look for an alternative. Vim's 20-year history and the <a href="http://www.vim.org/community.php">Vim community</a> convinced me that the editor would be available for many years to come.</p></li>
<li><p>Vim is fast. I laughed out loud the first time I saw<br/>
<code>NERDTree: Refreshing the root node. This could take a whileâ€¦ DONE</code><br/>
because it happened so quickly.</p></li>
<li><p>Vim can be customized. If I want to tailor Vim for myself, I can do that through plugins and <code>.vimrc</code>. If I don't want to configure it myself, I can use a tool like <a href="https://github.com/carlhuda/janus">Janus</a> by Carl Lerche and Yehuda Katz . You may choose a different course. Choices are powerful!</p></li>
</ol>


<p>The developers I admire are always learning. More important: They are strategic about what they learn because learning takes time. Being productive with a highly available editor like Vim means that I don't have to spend time learning a new editor. Instead, I can focus my education in areas that benefit clients directly. That's why I use Vim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix for Ruby Developers]]></title>
    <link href="http://RayHightower.com/blog/2012/12/24/unix-for-ruby-developers/"/>
    <updated>2012-12-24T16:50:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/24/unix-for-ruby-developers</id>
    <content type="html"><![CDATA[<p><a href="http://workingwithunixprocesses.com/"><img src="http://RayHightower.com/images/working-w-unix-processes.jpg" align="right" width="350" height="266"></a>
It is gratifying to know that learning something tangentially related to Ruby will, in fact, teach me more about Ruby.</p>

<p><a href="http://workingwithunixprocesses.com/"><em>Working With Unix Processes</em></a>, by Jesse Storimer, is ostensibly about Unix internals. However, in reading this book, I have become more aware of how executables run on my favorite family of operating systems, which in turn gives me more insight into Ruby.</p>

<h3>Passing Arguments</h3>

<p>For example, what happens when we pass arguments to a process, Ruby or otherwise? How do the arguments get there? Storimer offers a 1-line Ruby program called <code>argv.rb</code> that we can use to play with the ARGV array:</p>

<p>``` bash
~/Code/Ruby/apps/sandbox$ echo 'p ARGV' > argv.rb</p>

<p>~/Code/Ruby/apps/sandbox$ ruby argv.rb what results can we expect here
["what", "results", "can", "we", "expect", "here"]</p>

<p>~/Code/Ruby/apps/sandbox$</p>

<p>```</p>

<!--more-->


<p>Once we have our hands on the ARGV array, we can parse it and manipulate it at will.</p>

<h3>Grokking Forks</h3>

<p>The section on forks contains a lot of mind-bending fun. The author offers some code to explain how forks work, but some concepts are only understandable when we write our own code. I had to write my own in order to raise my comfort level with forks.</p>

<p>Here's what the code does:</p>

<ul>
<li>In the parent process, <code>fork</code> returns the <code>pid</code> of the child process.</li>
<li>In the child process, <code>fork</code> returns <code>nil</code>.</li>
<li>Therefore, the <code>if</code> block should be executed by the parent process...</li>
<li>...and the <code>else</code> block should be executed by the child process.</li>
</ul>


<p>``` ruby
puts "Parent process pid (before fork) is #{Process.pid}.\n"</p>

<p>if fork
  current_process = Process.pid
  parent_process = Process.ppid
  printf "Entered the <em>if</em> block during Process #{current_process}."
  printf "\nThe parent of this process is #{Process.ppid}, which should be bash.\n\n"
else
  current_process = Process.pid
  parent_process = Process.ppid
  printf "Entered the <em>else</em> block during Process #{current_process}."
  printf "\nThe parent of this process is #{parent_process}, which should be the original of this process.\n\n"
end</p>

<p>```</p>

<p>Running the above Ruby code produces the following results:</p>

<p>``` bash
~/Code/Ruby/apps/sandbox$ ruby forking_around.rb
Parent process pid (before fork) is 79703.
Entered the <em>if</em> block during Process 79703.
The parent of this process is 76751, which should be bash.</p>

<p>Entered the <em>else</em> block during Process 79704.
The parent of this process is 79703, which should be the original of this process.</p>

<p>```</p>

<p>Digging further: Let's look at the names that correspond to our
<code>pids</code>.</p>

<p>``` bash
~/Code/Ruby/apps/sandbox$ ps -p 79703
  PID TTY           TIME CMD</p>

<p>~/Code/Ruby/apps/sandbox$ ps -p 79704
  PID TTY           TIME CMD</p>

<p>~/Code/Ruby/apps/sandbox$ ps -p 76751
  PID TTY           TIME CMD
76751 ttys003    0:00.40 -bash</p>

<p>~/Code/Ruby/apps/sandbox$
```</p>

<p>We get zero data for the <code>pids</code> 79703 and 79704 because those processes terminated with the program <code>forking_around.rb</code>. However, 76751 shows <code>bash</code> because bash is still running.</p>

<p>The book is full of rich playground examples that go much deeper than this. Time slips away when I get rolling with this stuff!</p>

<h3>Errata Handling</h3>

<p>The book is new so you can expect a few typos. If you run into problems with sample code, a quick Google search will lead you to the corrected text. For example, early in the book I had problems with a command that returns the maximum number of processes allowed on a system. Turns out there was a typo, and <a href="http://forums.pragprog.com/forums/261/topics/11191">the correction</a> was posted by the author himself on the publisher's errata page.</p>

<h3>Conclusion</h3>

<p>I enjoyed reading <em>Working With Unix Processes</em> because it replaces a belief in "the magic of Unix" with a sound understanding of Unix fundamentals. The book is clear and brief with plenty of examples. The author assumes that readers have at least a basic understanding of Ruby. After that, you only need a command line, IRB, and the willingness to explore.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Makers, Objective-C, and RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion/"/>
    <updated>2012-12-14T06:45:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/ipad-iphone.jpg" width="256" height="250" alt="iPad iPhone" title="iPad iPhone" align="right">
This week I enrolled in the iOS Accelerated course offered by the <a href="http://mobilemakers.co/ios-accelerated">Mobile Makers Academy</a>. If you would like to do the same, mention my name and we'll both receive a $300 discount on tuition.</p>

<p>Class starts on Jan 7, 2013. The evening lectures are convenient for those who serve clients by day.</p>

<p>Of course, a tuition discount and easy schedule are poor reasons to enroll in a course. This article will describe my reasons for enrolling. If your thirst for learning is anything like mine, you might like Mobile Makers too.</p>

<!--more-->


<h4>Background and Expectations</h4>

<p>My background includes an undergrad degree in computer science. Over the years, I've coded in C, Lisp, Fortran, Pascal, x86 assembler, and Ruby. I became a "business guy" when I launched WisdomGroup eighteen years ago. WisdomGroup is fortunate to have a team of strong technologists who keep our clients happy while teaching me more every day.</p>

<p>In late 2011, I began to focus on sharpening my personal technical skills, and that led to my immersion in <a href="/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> this year. I expect the Mobile Makers experience to strengthen my grasp of Objective-C, OO theory, and iOS. Cross-training with Objective-C will boost my RubyMotion skills as well.</p>

<h4>Instruction Format</h4>

<p><a href="https://twitter.com/dbora">Don Bora</a> is the head instructor at Mobile Makers. Don is embarrassed when I say this, but he's the main reason why I chose to enroll. Don is a true polyglot programmer, with a background that includes Objective-C (of course!), C#, Java, Ruby, and Smalltalk among other languages. He currently builds Objective-C apps for his clients at <a href="http://eightbitstudios.com/">Eight Bit Studios</a>. Don holds degrees in computer science and linguistics.</p>

<p>Mobile Makers offers a learning format that is relatively new to me. Beyond the traditional classroom lectures, students get plenty of time for lab immersion and interaction with mentors. I first witnessed this format when Neal Sales-Griffin and Mike McGee launched <a href="http://starterleague.com">The Starter League</a>.</p>

<h4>More About Lab Time and Mentorship</h4>

<p>Classroom sessions are fine, but they're not enough. Can you learn a musical instrument by listening to lectures and taking notes? Mastering a skill like software development requires deliberate practice with challenging exercises. Learning is accelerated when lectures, labs, and mentorship complement each other.</p>

<h4>Learning Architecture</h4>

<p>Behind the scenes, Adam Lupu is the learning architect who designed the Mobile Makers curriculum. In Don's words: "I know how to explain things, but I don't know how to structure a course. That's where Adam comes in." Adam was the lead architect behind the Rails-based curriculum at the Starter League. Now he's building the mobile curriculum at Mobile Makers.</p>

<h4>Excitement</h4>

<p>The Mobile Makers <a href="http://mobilemakers.co/ios-accelerated">iOS Accelerated</a> class is only three weeks away. If you mention this blog post, you and I will both get a $300 tuition discount. More important, we will acquire skills that will serve us well as we solve problems for clients. What an exciting time to be a developer!</p>
]]></content>
  </entry>
  
</feed>
