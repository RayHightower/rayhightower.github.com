<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Education | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/education/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2013-07-15T14:38:54-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FeeddlerPro for RSS]]></title>
    <link href="http://RayHightower.com/blog/2013/07/04/feeddlerpro-for-rss/"/>
    <updated>2013-07-04T15:07:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/07/04/feeddlerpro-for-rss</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/FeeddlerPro-accounts.png" width="300" height="258"
align="right" alt="FeeddlerPro Accounts" title="FeeddlerPro Accounts">
Yes, the name appears misspelled. But <a href="https://itunes.apple.com/us/app/feeddler-rss-reader-pro/id365710282?mt=8">FeeddlerPro</a> is my choice for RSS on iPhone and iPad. Feeddler has long been my favorite RSS reader. The developer's decision to add support for services beyond Google Reader (Bazqux Reader, FeedHQ, and The OldReader) sealed the decision for me.</p>

<h3>Second Choice</h3>

<p><a href="/blog/2013/06/21/replacing-google-reader-with-feed-wrangler/">Feed Wrangler</a> was a close second. I like Feed Wrangler's minimalist approach to RSS. However, the app is missing a few features that FeeddlerPro already has baked in.</p>

<!--more-->


<h3>Server-Side Synchronization</h3>

<p>Of course, an RSS client is nothing without the server-side to keep everything synchronized. I chose <a href="http://theoldreader.com">The Old Reader</a> because it syncs between iPhone, iPad, and web without extra fluff.</p>

<p>Other RSS providers probably offer the same level of service. Fortunately, Feeddler makes it easy to switch between RSS services seamlessly.</p>

<p>Google Reader is history, but RSS marches on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PechaKucha: Developer Education at TableXI]]></title>
    <link href="http://RayHightower.com/blog/2013/06/27/pechakucha-developer-education-at-tablexi/"/>
    <updated>2013-06-27T15:13:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/06/27/pechakucha-developer-education-at-tablexi</id>
    <content type="html"><![CDATA[<p><a href="http://pechakucha.org">PechaKucha</a> is a concise presentation style developed in Japan. The PechaKucha format is 20x20: The presenter must share an idea in twenty slides, each displayed for exactly twenty seconds, advancing automatically. Total presentation time = six minutues, forty seconds.</p>

<!--more-->


<p><a href="http://www.tablexi.com/blog/2013/06/practice-begins-with-play-a-table-talk/developers/">TableXI</a> hosted a PechaKucha on June 13th with the theme <em>Developer Education</em>. I was one of six presenters invited to speak. Video:</p>

<center><iframe width='460' height='345' src="http://www.pechakucha.org/presentations/51b92936dbdd200cbc000011/embed" frameborder="0"></iframe></center>


<p>One highlight from the PechaKucha presentation: This year's <a href="http://windycityrails.org">WindyCityRails</a> will include a youth program on Thursday afternoon. Details will be announced in July. Follow <a href="http://twitter.com/windycityrails">@WindyCityRails</a> for the latest news on the program.</p>

<p>Thanks TableXI for the PechaKucha invitation, and for sponsoring WindyCityRails 2013!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prep for Parallella's 64 Cores: Installing Go on Mac OS X]]></title>
    <link href="http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/"/>
    <updated>2013-06-22T12:58:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/parallella.jpg" width="450" height="257" alt="Parallella 64-core supercomputer" title="Parallella 64-core supercomputer" align="right" imgcap="Parallella Board">
The idea of owning a 64-core parallel system for two hundred dollars (yes, $200.00) is exciting. <a href="http://www.parallella.org/introduction/">Parallella</a> is working to make that happen, perhaps as early as August 2013. To prepare for that day, I've decided to introduce myself to the Go language.</p>

<!--more-->


<h3>What is Go?</h3>

<p><a href="http://golang.org">The Go language</a> is designed for parallel systems. Why does Go exist? One developer sums it up this way:</p>

<blockquote><p>Go was created at Google, by Google, for Google-size problems.<br/>~Dave Astels</p></blockquote>

<p>Google writes software that runs on thousands of machines in parallel. As the number of concurrent operations increases, new challenges are encountered. Google addressed those challenges by creating Go.</p>

<h3>Why Does a Rubyist Learn Go?</h3>

<p>The team at <a href="http://wisdomgroup.com">WisdomGroup</a> writes web and mobile apps, mainly in Ruby. So why am I learning Go?</p>

<p>Because the best developers are polyglot. When we learn a new language, we cause ourselves to see old problems in new ways and we strengthen our ability to solve new problems. It's like cross-training for  athletes. In the end, we become better developers.</p>

<h3>How to Install Go on Mac OS X</h3>

<ol>
<li><a href="https://code.google.com/p/go/downloads/list">Download the binary of Go that matches your system</a>, and complete the rest of these steps before installing it. For my 2010 i5-based 15-inch MacBook Pro, I chose <code>go1.1.1.darwin-amd64.pkg</code>. I was concerned about the reference to <code>amd64</code> in the name. But the description includes <code>Mac OS X (x86 64-bit)</code>, and the binary worked for me.</li>
<br/>
<li>If you are upgrading from a previous version of Go, you will need to remove the old Go directory. You can do this while the new binary is downloading in the background:</li>

```bash
$ rm -rf /usr/local/go
```

<li>Define the <code>GOROOT</code> and <code>GOPATH</code> environmental variables. My system uses <code>~/.bash_profile</code> to define environmental variables, so I added the following lines to the end of that file:

```bash
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
export GOPATH=~/Code/gocode
```
Note: I'm using the default <code>GOROOT</code> variable, but your <code>GOPATH</code> may differ from mine. I store all of my source code in a subdirectory of home:<code>~/Code</code>. My complete Go directory structure is given below. By looking at my structure, you can adjust these steps to fit your system.</li>
<br/>
<li>Tell your terminal session to recognize the new environmental variables. You can either restart terminal, or if your environmental variables are in <code>~/.bash_profile</code> like mine, you can do the following:</li>

```bash
$ source ~/.bash_profile
```
<li>Run the package installation program, <code>go1.1.1.darwin-amd64.pkg</code>, that was downloaded in Step 1.</li>
</ol>


<p>Now, let's Go for a test drive.</p>

<h3>Creating a Go Workspace</h3>

<p>Before you can run a Go program on your system, you have to create a Go workspace. A workspace is a directory structure that contains source code and binaries that a Go program needs in order to compile and execute.</p>

<p>We can examine the Go Workspace on my system with the Unix <code>tree</code> command:</p>

<p>```bash
~/Code/gocode$ tree
.
└── src</p>

<pre><code>└── github.com
    └── rayhightower
        └── hello
            └── hello.go
</code></pre>

<p>4 directories, 1 file</p>

<p>~/Code/gocode$
```</p>

<p>Here's a brief description of the directories:</p>

<ul>
<li>Code = root directory for all source code on my system. Yours may differ.</li>
<li>gocode = where I store all of the Go code on my system. I'm following the structure recommended by the Go documentation. I may alter this as I learn more about the language.</li>
<li>src = source code</li>
<li>github.com = directory named after the place where I store repos</li>
<li>rayhightower = my GitHub profile name</li>
<li>hello = directory named for our first Go application</li>
<li>hello.go = the Go source file for our <code>Hello World</code> program</li>
</ul>


<p>All structure below the <code>gocode</code> directory is mandated by Go.</p>

<h3>Writing 'Hello World!' in Go</h3>

<p>Google's official installation instructions include a simple 'Hello World' program for testing the installation. A slightly modified version appears below:</p>

<p>```go
package main</p>

<p>import "fmt"</p>

<p>func main() {</p>

<pre><code>fmt.Printf("\n****** Hey Parallella enthusiasts: Learn Go! ******\n")
</code></pre>

<p>}
```</p>

<h3>Compiling and Running</h3>

<p>We drop the code into a file called <code>hello.go</code> in the <code>hello</code> directory. To compile the program:</p>

<p>```bash
~/Code/gocode/src/github.com/rayhightower/hello$ go install</p>

<p>~/Code/gocode/src/github.com/rayhightower/hello$
<code>``
If the Go compiler responds with a blank prompt (like above) then the program compiled successfully and a</code>bin<code>directory has been created inside the Go workspace. Run the</code>tree<code>command from the</code>gocode` directory to see how the structure has changed:</p>

<p>```bash
~/Code/gocode$ tree
.
├── bin
│   └── hello
└── src</p>

<pre><code>└── github.com
    └── rayhightower
        └── hello
            └── hello.go
</code></pre>

<p>5 directories, 2 files</p>

<p>~/Code/gocode$
```</p>

<p>The newly created <code>bin/</code> directory contains our <code>hello</code> executable. And now, let's cut the suspense and <em>run the program</em>. To do so, change into the <code>bin/</code> directory and type <code>./hello</code>.</p>

<p>```bash
~/Code/gocode/src/github.com/rayhightower/hello$ cd ~/Code/gocode/bin</p>

<p>~/Code/gocode/bin$ ./hello</p>

<p><strong><strong><strong> Hey Parallella enthusiasts: Learn Go! </strong></strong></strong></p>

<p>~/Code/gocode/bin$
```
Success!</p>

<h3>It's Not Official, But It Makes Sense</h3>

<p>As of this writing, Parallella does not officially support the Go language. So why go through all of this trouble? Because...</p>

<ul>
<li>A 64-core Parallella is just too cool to pass up. And it's open source.</li>
<li>Go is designed for parallel systems. And it's open source.</li>
<li>Open source devs are working on a Go compiler for Parallella right now. If you're reading this, and you're one of the devs, thank you!</li>
</ul>


<p>The Go-Parallella match makes sense. It's always good to skate where the puck is going.</p>

<h3>Next Steps</h3>

<p>Now it's time to explore the Go language. The real adventure begins when the 64-core Parallella arrives. Looking forward to it!</p>

<h3>Acknowledgements</h3>

<p>I was inspired to explore Go by <a href="https://twitter.com/blakesmith">Blake Smith's</a> presentation at <a href="http://www.meetup.com/ChicagoSC/events/120658422/">8th Light</a>. <a href="http://twitter.com/wondible">Justin Love</a> introduced me to Parallella last month at ChicagoRuby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing Google Reader with Feed Wrangler]]></title>
    <link href="http://RayHightower.com/blog/2013/06/21/replacing-google-reader-with-feed-wrangler/"/>
    <updated>2013-06-21T18:52:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/06/21/replacing-google-reader-with-feed-wrangler</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/feedwrangler-gil.jpg" height="600" width="450" align="right" alt="Google Reader Replacement: Feed Wrangler - iPad" title="Google Reader Replacement: Feed Wrangler - iPad">
Google Reader, the RSS product, shuts down on July 1st. I consume most news via RSS, and the ability to sync multiple RSS clients between iPhone, iPad, and desktop with Google Reader in the background saved time while keeping me informed. Finding a replacement is critical.</p>

<p>Fortunately, strong alternatives are emerging. <a href="http://feedwrangler.net">Feed Wrangler</a> is a Google Reader replacement by independent developer <a href="http://david-smith.org">David Smith</a>. Here are my first impressions.</p>

<!--more-->


<h3>Pros</h3>

<p>After using the service for a few hours, I can already see some things that I like. Specifically:</p>

<ul>
<li>Minimal fluff. Other RSS clients feature big photos and page-flipping special effects. That's not for me. Just the facts, RSS.</li>
<li>Easy RSS import from Google Reader. Just log in with your Google account and follow the prompts. After you import your feeds into Feed Wrangler's web app, you will never need Google Reader again.</li>
<li>Reasonable cost. The Feed Wrangler service costs $19/year. Google dropped Reader because they couldn't make money from the free product. You can't fix that with volume! When an app makes money (directly or indirectly) then the app is more likely to stick around.</li>
<li>iPhone and iPad apps. Feed Wrangler's native apps for <a href="https://itunes.apple.com/us/app/feed-wrangler/id634486174?mt=8">iPhone and iPad</a> sync with the web app. This is important for me because I consume most RSS on-the-go. A screenshot from the iPad app appears above.</li>
</ul>


<h3>Cons</h3>

<p>Like most users, I want the developer to add "just one or two more features" to make the app perfect for me. Of course that's the slippery slope to bloatware since every user has a different set of one-or-two features.</p>

<p>The developer can avoid bloatware by ignoring all other users and focusing on <em>my</em> feature requests:</p>

<ul>
<li>Evernote integration. My current RSS client lets me drop an article into Evernote with a few taps on the screen. Sometimes I want to re-read an article or think about it more deeply at a later time. Evernote lets me do this.</li>
<li>Organized imports. While Feed Wrangler imports feeds from Google Reader, it does not maintain Reader's organization. So I had to organize my feeds manually with Feed Wrangler's "Smart Stream" feature. If Reader's folders could be imported as Feed Wrangler's Smart Streams, that would be cool.</li>
<li>Feed counter. Sometimes I prioritize my reading by the number of unread articles. A counter next to each feed would be helpful.</li>
</ul>


<h3>Summary</h3>

<p>I plan to try other RSS readers before Google Reader shuts down on July 1st. Feed Wrangler is making a good impression so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practice Begins With Play]]></title>
    <link href="http://RayHightower.com/blog/2013/06/13/practice-begins-with-play/"/>
    <updated>2013-06-13T10:09:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/06/13/practice-begins-with-play</id>
    <content type="html"><![CDATA[<p>This afternoon I was invited to speak at the June <a href="http://www.tablexi.com/blog/2013/06/developer-education-june-table-talks/developers/">Table Talks</a> hosted by Table XI. Today's theme was developer education. My topic: <em>Practice Begins With Play</em>. Developers who want to achieve mastery have many practice resources to choose from, including open source hardware like <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspbery Pi</a>, <a href="/blog/2013/05/22/beaglebone-black-up-and-running/">BeagleBone Black</a>, and <a href="http://parallella.org">Parallella</a>.</p>

<!--more-->


<h4>PechaKucha</h4>

<p>Presentations were given in the <a href="http://www.pechakucha.org/faq">PechaKucha</a> format, which encourages presenters to deliver the maximimum amount of useful information in a relatively short time. Each presenter is only allowed twenty slides, with twenty seconds per slide. Truly high impact!</p>

<h4>Slides and Video</h4>

<p>Slides from the talk appear below. Video will be posted here as soon as it becomes available. <em>Update: Video has been <a href="/blog/2013/06/27/pechakucha-developer-education-at-tablexi/">posted</a>.</em></p>

<center><script async class="speakerdeck-embed" data-id="391a4b80b66a013009c8226af5af9159" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<p>Thank you Table XI for the invitation!</p>
]]></content>
  </entry>
  
</feed>
