<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RayHightower.com]]></title>
  <link href="http://RayHightower.com/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2013-03-01T12:06:20-06:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C Programming: The Big Nerd Ranch Guide]]></title>
    <link href="http://RayHightower.com/blog/2013/02/28/objective-c-programming-the-big-nerd-ranch-guide/"/>
    <updated>2013-02-28T15:52:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/28/objective-c-programming-the-big-nerd-ranch-guide</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/objective-c-big-nerd.png" align="right" width="250" height="357" alt="Objective-C Programming - The Big Nerd Ranch Guide" title="Objective-C Programming - The Big Nerd Ranch Guide"></p>

<blockquote><p>You will be baffled from time to time… Stick with this book. I promise the bewilderment will cease before you get to the final page.<br/>~ Aaron Hillegass, Author</p></blockquote>

<h4>Finding the Right Objective-C Book</h4>

<p>I&#8217;ve gone through several Objective-C books in my quest to master <a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>. You read that right: I&#8217;m learning Objective-C so that I can master RubyMotion. <em>Objective-C Programming: The Big Nerd Ranch Guide</em> is one book that clicks for me. Here&#8217;s why.</p>

<!-- more -->


<ul>
<li><p>Minimal fluff. Other Objective-C books start off with speeches about why a dev should write for iOS. What a waste of paper. The Big Nerd approach: Start with a few paragraphs about C, and then jump right in to Xcode installation followed by &#8220;Hello World.&#8221; Refreshingly direct.</p></li>
<li><p>Clear examples. As I immerse myself deeper into the world of Objective-C, I am troubled by much of the documentation. It&#8217;s okay to describe a method signature, but a description with an example is much better. While reading other Objective-C books, I found myself pausing to search Stack Overflow for alternate explanations. The Big Nerd book is better because everything is self-contained. Method descriptions are followed by clear examples.</p></li>
<li><p>Zero Assumptions. Even though the book contains minimal fluff, readers will appreciate how the author defines terms throughout the text. For example, the book does not assume that the reader knows the classroom definition of the word <em>syntax</em>. It defines the word explicitly:</p></li>
</ul>


<blockquote><p>Syntax is the set of rules that governs how your code must be written in a given programming language. These rules are extremely specific, and if you fail to follow them, your program won&#8217;t work.</p></blockquote>

<p>Clearly put!</p>

<h4>Do I Really Need Objective-C?</h4>

<p>Yes. If you want to be effective with RubyMotion, you must grow strong with Objective-C.</p>

<p>The RubyMotion devs whom I admire most also know Objective-C. Devs like Matt Aimonetti (creator of BubbleWrap), Randall Thomas and Tammer Saleh (authors of <em>RubyMotion in the Cloud</em>), Jonathan Penn (instructor/speaker at CocoaConf) and Laurent Sansonetti (creator of RubyMotion) move seamlessly between the worlds of Ruby and Objective-C. Luke became a Jedi because he followed in the footsteps of Yoda.</p>

<p>More important than following the masters: Learning from their triumphs and mistakes by reading their code. Developers in 2013 are fortunate to have tools like GitHub where code is shared on a massive scale. Most iOS code is written in Objective-C. If we want to learn from the iOS code that has been written before, we need to know Objective-C.</p>

<h4>Highly Recommended</h4>

<p>If you want to develop apps for iOS devices, start with <em>Objective-C Programming: The Big Nerd Ranch Guide</em>. The book is also helpful if you prefer RubyMotion over Objective-C.</p>

<p>And don&#8217;t forget your <a href="http://RayHightower.com/blog/2012/09/03/10000-hours-of-practice/">10,000 Hours of Practice</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atari's Pong, Built With RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2013/02/26/atari-pong-rubymotion-objective-c/"/>
    <updated>2013-02-26T10:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/26/atari-pong-rubymotion-objective-c</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/pong-rubymotion-objective-c.png" width="300" height="160" alt="Atari's Pong in RubyMotion and Objective-C" title="Atari's Pong in RubyMotion and Objective-C" align="right">
<a href="http://en.wikipedia.org/wiki/Pong">Atari&#8217;s Pong</a> is a classic video arcade game from the 1970s. Seeing Pong always gives me childhood flashbacks.</p>

<h4>Pong in Objective-C</h4>

<p>I recently completed the <a href="http://mobilemakers.co/ios-accelerated">iOS Accelerated</a> course at the <a href="http://mobilemakers.co/">Mobile Makers Academy</a>. For one of our homework assignments, we were asked to build a version of Pong that runs on iOS. Our instructor, <a href="http://twitter.com/dbora">Don Bora</a>, started us off with some skeleton code in Objective-C. Each student had to take Don&#8217;s code and:</p>

<ul>
<li>Add paddles.</li>
<li>Make the paddles move on their own.</li>
<li>Make the ball bounce off the moving paddles.</li>
<li>Keep score.</li>
<li>Let one or two players control the paddles via touch.</li>
</ul>


<!-- more -->


<h4>Questions to Consider</h4>

<p>How do you determine whether the pixels of the ball have collided with the pixels of a paddle? What about wall collisions? When a collision occurs, where should the ball bounce next? As with any application, there are many details to consider.</p>

<h4>Building Blocks</h4>

<p>Of course, Don had already introduced the necessary skills in earlier lectures, labs, and homework. It was our job to put the pieces together.</p>

<p>Members of the class paired with each other. We shared solutions and advice. In time, we each ended up with a working version of Pong in Objective-C. It&#8217;s exciting to see a favorite childhood game running in the iOS simulator on your own machine, especially if you built the game yourself.</p>

<h4>Pong in RubyMotion</h4>

<p>Since my day job revolves around Ruby, it made sense to re-write the exercise in <a href="http://rayhightower.dev/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>. Here are video clips of my two solutions. The first was written in Objective-C during the Mobile Makers course. The second was written in RubyMotion.</p>

<center><iframe name="pong-oc" width="560" height="315" src="http://www.youtube.com/embed/9LETiMdi9jQ?rel=0" frameborder="0" allowfullscreen></iframe></iframe></center>




<center><iframe name="pong-rm" width="560" height="315" src="http://www.youtube.com/embed/Lt-JKqiA_fg?rel=0" frameborder="0" allowfullscreen></iframe></center>


<p>As expected, the two solutions look similar. Source code is on GitHub:</p>

<ul>
<li><a href="http://github.com/rayhightower/pong-oc">Pong in Objective-C</a></li>
<li><a href="http://github.com/rayhightower/pong-rm">Pong in RubyMotion</a></li>
</ul>


<h4>RubyMotion Gotchas</h4>

<p>I encountered a few RubyMotion snags during development:</p>

<ul>
<li><p><em>Mouseovers Ingored</em>. Normally, when running the simulator with RubyMotion, you can mouse over an object in the simulator, hit the command key, and grab a handle to the object.  This behavior was absent in landcape mode with version 1.31 of RubyMotion. The release notes for version 1.33 mention that the problem has been solved. However, that was not my experience.</p></li>
<li><p><em>Touch Events Ignored on Part of Screen</em>. For some reason, the simulator ignored touch events on the right side of the screen. When I programatically moved the right paddle closer to the left side of the screen, both paddles responded to touch events. Searches of Google and Stack Overflow reveal that others have encounterd the same issue with touch events, especially in landcape mode.</p></li>
</ul>


<p>Of course, I introduced a few bugs of my own while developing the Pong game. At one point, the velocity of the ball increased every time a player scored. It made the game exciting! But I didn&#8217;t know the cause of the acceleration, and good developers strive to maintain better control over their projects.</p>

<p>I eventually found the acceleration problem: When using an NSTimer object to control animation, you have to invalidate the timer at the beginning of each cycle, or the animation will accelerate. That&#8217;s a useful thing to know.</p>

<p>The rest of my work in RubyMotion went well, and I continue to enjoy the product. I plan to update the code once the touch event issues have been resolved.</p>

<h4>Why Play Games?</h4>

<p>Why should a serious developer spend time writing games? I can think of a few reasons:</p>

<ul>
<li><p>Writing a game challenges our skills on many levels. In the case of Pong, we have to dust off our old physics and geometry textbooks to ensure that the ball bounces like a real ball.</p></li>
<li><p>Writing a game lets us break out of our constraints. Devs who write business apps are very familiar with constraints.</p></li>
<li><p>Because writing a game is fun.</p></li>
</ul>


<p>Of course, the most important reason was given by a captain of the USS Enterprise NCC-1701:</p>

<blockquote><p>The more advanced the mind, the greater the need for the simplicity of play.
<br/>~James T. Kirk</p></blockquote>

<h4>Room for Improvement</h4>

<p>Building the Pong game was an interesting exercise in testing the capabilities of RubyMotion. Having done the work, I can look back and see some areas where I could improve the results. For example:</p>

<ul>
<li><p>Automated testing. These proof-of-concept exercises were done without automated testing. What is the best way to apply test driven development to a game? RubyMotion comes with a TDD framework, MacBacon. That would be a great subject for a future blog post.</p></li>
<li><p>Better design. Each exercise looks like something from the 1970s! How would Pong function if it was created in 2013?</p></li>
<li><p>Better collision detection. I&#8217;m using a built-in iOS method to detect ball collisions. The built-in detection works fine with the stationary walls, but not as well with the moving paddles. If I write a future version of Pong, I should also write a custom collision detection method.</p></li>
</ul>


<h4>Comments and Pull Requests</h4>

<p><a href="http://wisdomgroup.com">My team and I</a> build business apps. My gaming experience is limited. If you are a game developer, and if you see anything in my code that could be done better, your ideas are welcome. Feel free to submit a <a href="http://github.com/rayhightower/pong-rm">pull request via GitHub</a>, or you can drop a note in the comments below. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprenticeship Patterns]]></title>
    <link href="http://RayHightower.com/blog/2013/02/17/apprenticeship-patterns-by-dave-h-hoover-and-adewale-oshineye/"/>
    <updated>2013-02-17T09:52:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/17/apprenticeship-patterns-by-dave-h-hoover-and-adewale-oshineye</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/apprenticeship-patterns.gif" align="right" width="180" height="236" alt="Apprenticeship Patterns" title="Apprenticeship Patterns"></p>

<blockquote><p><em>In times of drastic change it is the learners who inherit the future. The learned usually find themselves equipped to live in a world that no longer exists.<br/>- Eric Hoffer, Reflections on the Human Condition</em></p></blockquote>

<p>Blogger&#8217;s Note: This review of the book <em>Apprenticeship Patterns</em> by <a href="https://twitter.com/davehoover">Dave H. Hoover</a> and <a href="http://twitter.com/ade_oshineye">Adewale Oshineye</a> was originally posted at <a href="http://www.chicagoruby.org/book-reviews/">ChicagoRuby.org/book-reviews</a>.</p>

<h4>A New Profession</h4>

<p>Software development is among the newest of professions – roughly 70 years old depending on what you consider to be the beginning. The field is in a constant state of flux. New languages, new theories, new ways of communicating with clients… the list seems endless. How does a new developer keep up? How does a seasoned developer avoid growing stale?</p>

<!-- more -->


<h4>How to Excel</h4>

<p>Apprenticeship Patterns was written as a guide for developers who want to excel throughout their careers. You might think of the book as a compilation of design patterns applied to human beings. Yes, the book is suitable for new developers. But seasoned people will find value as well. One useful pattern for veterans: Share What You Learn. All of us see old ideas through fresh glasses when we’re questioned about them. “When one person teaches, two people learn,” says the book.</p>

<p>How did the authors compile the list of patterns? They reflected on their own practices and they asked other developers. They spoke with software professionals at various stages of their careers to find out what steps they took (and continue to take) to keep growing.</p>

<h4>Non-Linear Reading</h4>

<p>The book can be read in a non-linear fashion if you prefer. I would suggest that you start with the Reading List pattern on page 100, followed by Read Constantly on page 111. These two patterns do a great job of framing the rest of the book because the reader will be executing the pattern while reading about it. There’s something meta about starting that way, and meta is cool.</p>

<p>The Reading List pattern inspired me to post my personal reading list on GitHub.</p>

<h4>Steer Your Own Education</h4>

<p>One theme consistently appears throughout the book: If you want to be a great software developer, you must be an active participant in your own education. Formal education might be a good start, but it’s not enough. Formal programs tell you what to read. Formal programs tell what to do in the classroom, and if you’re a good student you do it. But here’s something that we rarely do: While finishing a formal assignment, how many of us stop to consider whether we’ve been assigned the best curriculum for our long term goals?</p>

<p>The professional person must be a continuous student. Patterns give us a good place to start.</p>

<h4>Improvements</h4>

<p>What should the next edition of Apprenticeship Patterns look like? For starters, I would love to read an electronic version… filled with hyperlinks. All of the apprenticeship patterns relate to other patterns, and being able to click to the related patterns would enrich the learning experience. This book would make a great mobile app, especially if you turn all of the references into hyperlinks. What an exciting learning experience it would be!</p>

<p>Now… if only we could find a hand-held reading device that supports hyperlinks, and a couple of software craftsmen to get the job done :-)</p>

<h4>Update After the Original Post</h4>

<p>Ade Oshineye tweeted with good news a few minutes after the original post:</p>

<blockquote><p>@ChicagoRuby: Wish granted: <a href="http://apprenticeship-patterns.labs.oreilly.com/">http://apprenticeship-patterns.labs.oreilly.com/</a>. The book is available online as a hypertext.</p></blockquote>

<p>Thank you authors!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic ctags with RubyMotion and Vim]]></title>
    <link href="http://RayHightower.com/blog/2013/02/12/automatic-ctags-with-rubymotion-and-vim/"/>
    <updated>2013-02-12T19:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/12/automatic-ctags-with-rubymotion-and-vim</id>
    <content type="html"><![CDATA[<p><a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> includes a <code>rake</code> task that generates <a href="http://ctags.sourceforge.net/whatis.html">Exuberant Ctags</a>. To generate tags, run the following in the root directory of a RubyMotion project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake ctags
</span></code></pre></td></tr></table></div></figure>


<h4>Make Ctags Better With Automation</h4>

<p>Ctags make writing code more efficient. But we shouldn&#8217;t have to type <code>$ rake ctags</code> every time we create a new RubyMotion project. This article shows how to use a shell script to generate ctags automatically every time you create a new RubyMotion app.</p>

<!-- more -->


<h4>How Ctags Save Time</h4>

<p>Ctags can save you time. For example, when creating a new class called <code>HomeViewController</code> that inherits from <code>UIViewController</code>, typing the first view characters of the superclass will produce the drop-down shown below.
<img src="http://RayHightower.com/images/uiviewcontroller.png" align="center" width="800" height="433" title="ctags RubyMotion Vim" alt="ctags RubyMotion Vim"></p>

<p>RubyMotion&#8217;s implementation of ctags includes support for built-in iOS classes like UIViewController. The code completion and drop-downs offered by ctags will reduce keystrokes and errors, freeing the developer to focus on solving harder problems.</p>

<h4>Creating the Script</h4>

<p>Here&#8217;s the script. You can use any name that suits you. My script is called <code>mmotion.command</code> (with two m&#8217;s at the beginning to distinguish it from the standard <code>motion</code> command) and it&#8217;s in the <code>~/bin/</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># Create a RubyMotion app, change into the app&#39;s directory, and run ctags.</span>
</span><span class='line'><span class="c"># Written by Raymond T. Hightower on February 12, 2013</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Creating a new RubyMotion app called:&quot;</span> <span class="nv">$1</span>
</span><span class='line'>motion create <span class="nv">$1</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$1</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Creating ctags for the new RubyMotion app...&quot;</span>
</span><span class='line'>rake ctags
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Opening the new app in Vim...&quot;</span>
</span><span class='line'>mvim .
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;To use the RubyMotion console, cd into the new directory:&quot;</span> <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of the work is done by by four lines. The remaining lines are comments or &#8216;echos&#8217; that tell the user what&#8217;s happening while the script is running.</p>

<h4>Running the Script</h4>

<p>If <code>~/bin/</code> is in the <code>$PATH</code>, you can run the script with the following line command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mmotion.command <span class="o">[</span>app name<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we can still do better by leveraging the power of aliases in <code>~/.bash_profile</code>.</p>

<h4>Adding an Alias to ~/.bash_profile</h4>

<p>Dropping an alias into <code>~/.bash_profile</code> streamlines the process even more. You can use any alias you want as long as it doesn&#8217;t confilct with another command. Here&#8217;s what my alias looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">mmotion</span><span class="o">=</span><span class="s2">&quot;mmotion.command&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Taking the Script for a Spin</h4>

<p>Now we can build a new RubyMotion app called <code>NewApp</code> with these results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/RubyMotion<span class="nv">$ </span>mmotion NewApp
</span><span class='line'>Creating a new RubyMotion app called: NewApp
</span><span class='line'>    Create NewApp
</span><span class='line'>    Create NewApp/.gitignore
</span><span class='line'>    Create NewApp/Rakefile
</span><span class='line'>    Create NewApp/app
</span><span class='line'>    Create NewApp/app/app_delegate.rb
</span><span class='line'>    Create NewApp/resources
</span><span class='line'>    Create NewApp/spec
</span><span class='line'>    Create NewApp/spec/main_spec.rb
</span><span class='line'>Creating ctags <span class="k">for </span>the new RubyMotion app...
</span><span class='line'>Opening the new app in Vim...
</span><span class='line'>To use the RubyMotion console, <span class="nb">cd </span>into the new directory: NewApp
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/RubyMotion<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>After the bash script ends, it lands in the directory from which it was originally run, no matter what directories it changed to during execution. This script will open the new app in Vim when it&#8217;s done.</p>

<p>From here, you can <code>$ cd NewApp</code> and type <code>rake</code> to run the app in the iOS simulator.</p>

<h4>Feedback Welcome</h4>

<p>If you notice any glitches with this approach, feel free to send me a &#8220;heads up&#8221; via the <a href="http://RayHightower.com/contact/">contact</a> form on this site or in the blog comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Vast and Endless Sea]]></title>
    <link href="http://RayHightower.com/blog/2013/01/17/the-vast-and-endless-sea/"/>
    <updated>2013-01-17T13:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/17/the-vast-and-endless-sea</id>
    <content type="html"><![CDATA[<p>All of us are inspired when we have a big goal to achieve. Antoine De Saint-Exupery expresses the idea well:</p>

<blockquote><p>If you want to build a ship, don’t drum up the people to gather wood, divide the work and give orders. Instead, encourage them to yearn for the vast and endless sea.</p></blockquote>

<p>2013 is already proving to be an exciting year. Looking forward to more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Use Vim]]></title>
    <link href="http://RayHightower.com/blog/2013/01/12/why-i-use-vim/"/>
    <updated>2013-01-12T11:07:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/12/why-i-use-vim</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/vim-osx.png" width="300" height="257" alt="Vim on OSX" title="Vim on OSX" align="right"/>
My primary code-writing tools are:</p>

<ul>
<li><a href="https://developer.apple.com/xcode/">Xcode</a> for Objective-C.</li>
<li><a href="http://code.google.com/p/macvim/">Vim</a> for Ruby, <a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>, and everything else.</li>
</ul>


<p>Here are my reasons for using Vim, in priority order:</p>

<!--more-->


<ol>
<li><p>Vim is everywhere. I can find Vim on any &#39;nix-based machine: Unix, Linux, or OSX. I spend most of my time on OSX and the Ubuntu distribution of Linux. When I started experimenting with <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a>, it was pleasant to know that Vim was already there. Having a common editor on multiple platforms makes it easier to bounce between them.</p></li>
<li><p>Vim has history. I tried TextMate when I first heard about Ruby. Questions about TextMate&#8217;s future caused me to look for an alternative. Vim&#8217;s 20-year history and the <a href="http://www.vim.org/community.php">Vim community</a> convinced me that the editor would be available for many years to come.</p></li>
<li><p>Vim is fast. I laughed out loud the first time I saw<br/>
<code>NERDTree: Refreshing the root node.</code><br/>
<code>This could take a while… DONE</code><br/>
because it happened so quickly.</p></li>
<li><p>Vim can be customized. If I want to tailor Vim for myself, I can do that through plugins and <code>.vimrc</code>. If I don&#8217;t want to configure it myself, I can use a tool like <a href="https://github.com/carlhuda/janus">Janus</a> by Carl Lerche and Yehuda Katz . You may choose a different course. Choices are powerful!</p></li>
</ol>


<p>The developers I admire are always learning. More important: They are strategic about what they learn because learning takes time. Being productive with a highly available editor like Vim means that I don&#8217;t have to spend time learning a new editor. Instead, I can focus my education in areas that benefit clients directly. That&#8217;s why I use Vim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Pilot for Xcode Navigation]]></title>
    <link href="http://RayHightower.com/blog/2013/01/08/code-pilot-for-Xcode-navigation/"/>
    <updated>2013-01-08T10:54:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/08/code-pilot-for-Xcode-navigation</id>
    <content type="html"><![CDATA[<p><a href="http://codepilot.cc">Code Pilot</a> is a free tool that lets developers navigate quickly between files in Xcode. I was introduced to the tool yesterday by Don Bora, instructor of the Mobile Makers <a href="http://mobilemakers.co/">iOS Accelerated</a> course that I&#8217;m currently taking.</p>

<h4>Starting Code Pilot</h4>

<p>After downloading and installing the product, launch Code Pilot by starting Xcode and using the SHIFT-COMMAND-X key sequence.</p>

<p><img src="http://RayHightower.com/images/nine-days-left.png" align="center" height="494" width="630" alt="Code Pilot w/o License" title="Code Pilot w/o License"></p>

<p>Code Pilot is free, but you still need to request and install the license file.</p>

<!--more-->


<h4>Installing the License</h4>

<p>It wasn&#8217;t immediately obvious to me where to put the license file. A quick email to Code Pilot&#8217;s tech support team got me an answer. This post may save you some time if you decide to try Code Pilot for yourself.</p>

<p>In Xcode, go into preferences (Xcode | Preferences). One section of the preference pane is devoted to Code Pilot. Go to that section, paste in the license, and you&#8217;re all set.</p>

<p><img src="http://RayHightower.com/images/paste-license.png" align="center" height="483" width="630" alt="Code Pilot preferences in Xcode" title="Code Pilot preferences in Xcode" ></p>

<h4>First Impression of Code Pilot</h4>

<p>I can see how the tool could make Xcode navigation faster. One drawback: As a Vim user, I&#8217;m in the habit of navigating with h, j, k, and l. Code Pilot requires me to use the arrow keys. If Code Pilot came equipped with Vim key bindings, I would view that as a plus!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leap Motion: Advanced User Interface]]></title>
    <link href="http://RayHightower.com/blog/2013/01/07/leap-motion-advanced-user-interface/"/>
    <updated>2013-01-07T11:56:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/07/leap-motion-advanced-user-interface</id>
    <content type="html"><![CDATA[<p><a href="https://leapmotion.com/">Leap Motion</a> is a small device that lets users control their computers with simple hand gestures. The Leap Motion controller senses individual hand and finger movements. This is not a touch interface, because your hands never touch anything.</p>

<p>WisdomGroup is a member of the Leap Motion Developer Program. Check out this 1-minute video.</p>

<center><iframe name="leapmotion" width="560" height="315" src="http://www.youtube.com/embed/_d6KuiuteIA?rel=0" frameborder="0" allowfullscreen></iframe></center>




<!--more-->


<h4>Why Leap Motion?</h4>

<p>Computers became easier to use when the mouse grew popular in the 1980s. Touchscreens offer another solution for the interaction riddle. The Leap Motion controller looks like another solution.</p>

<p>It&#8217;s still very early for Leap Motion. New applications will be born through this device. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Provisioning Profiles]]></title>
    <link href="http://RayHightower.com/blog/2012/12/26/rubymotion-provisioning-profiles/"/>
    <updated>2012-12-26T20:46:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/26/rubymotion-provisioning-profiles</id>
    <content type="html"><![CDATA[<p><em>Note: This article on provisioning profiles was first posted in the <a href="https://groups.google.com/forum/?fromgroups=#!topic/rubymotion/Nvo8dH_8rkI">RubyMotion Google Group</a> on May 10, 2012. It was also referenced on <a href="http://stackoverflow.com/questions/13539743/rubymotion-build-error-cant-find-a-provisioning-profile-named-mixios-tea">Stack Overflow</a>.</em></p>

<p>Everything with RubyMotion worked great until I tried to run the sample apps on a physical device. And then I had to spend a few hours wrestling with provisioning profiles. Hopefully this post will save time for somebody else.</p>

<!-- more -->


<p>In order to successfully run a RubyMotion app on a non-jailbroken iPhone 3GS (via <code>$ rake device</code>) I had to:</p>

<ul>
<li>Delete all of the expired provisioning profiles in the Mac OS X Keychain Access app. Yeah, my past is littered with many random experiments :-)</li>
<li>Explicitly set the path to my provisioning profile in the rakefile for the app (the defaults didn&#8217;t work for me).</li>
<li>Explicitly set the name of my codesign_certificate.</li>
</ul>


<p>The default &#8220;iOS Team Profile&#8221; didn&#8217;t work for me. I had to set explicit values in my rakefile for the app. Here&#8217;s my rakefile for the <a href="https://github.com/HipByte/RubyMotionSamples/tree/master/Tweets">&#8216;Tweets&#8217; sample app</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;/Library/RubyMotion/lib&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;motion/project&#39;</span>
</span><span class='line'><span class="no">Motion</span><span class="o">::</span><span class="no">Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span> <span class="c1"># Use `rake config&#39; to see complete project settings. </span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Tweets&#39;</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">provisioning_profile</span> <span class="o">=</span> <span class="s1">&#39;/Users/[username]/Library/ MobileDevice/Provisioning Profiles/[string-of-numbers].mobileprovision&#39;</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">codesign_certificate</span> <span class="o">=</span> <span class="s1">&#39;iPhone Developer: John Q Developer (A5QZ9QF4Z1)&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, my name isn&#8217;t &#8220;John Q Developer&#8221;, but you get the idea. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix for Ruby Developers]]></title>
    <link href="http://RayHightower.com/blog/2012/12/24/unix-for-ruby-developers/"/>
    <updated>2012-12-24T16:50:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/24/unix-for-ruby-developers</id>
    <content type="html"><![CDATA[<p><a href="http://workingwithunixprocesses.com/"><img src="http://RayHightower.com/images/working-w-unix-processes.jpg" align="right" width="350" height="266"></a>
It is gratifying to know that learning something tangentially related to Ruby will, in fact, teach me more about Ruby.</p>

<p><a href="http://workingwithunixprocesses.com/"><em>Working With Unix Processes</em></a>, by Jesse Storimer, is ostensibly about Unix internals. However, in reading this book, I have become more aware of how executables run on my favorite family of operating systems, which in turn gives me more insight into Ruby.</p>

<h3>Passing Arguments</h3>

<p>For example, what happens when we pass arguments to a process, Ruby or otherwise? How do the arguments get there? Storimer offers a 1-line Ruby program called <code>argv.rb</code> that we can use to play with the ARGV array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;p ARGV&#39;</span> &gt; argv.rb
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ruby argv.rb what results can we expect here
</span><span class='line'><span class="o">[</span><span class="s2">&quot;what&quot;</span>, <span class="s2">&quot;results&quot;</span>, <span class="s2">&quot;can&quot;</span>, <span class="s2">&quot;we&quot;</span>, <span class="s2">&quot;expect&quot;</span>, <span class="s2">&quot;here&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Once we have our hands on the ARGV array, we can parse it and manipulate it at will.</p>

<h3>Grokking Forks</h3>

<p>The section on forks contains a lot of mind-bending fun. The author offers some code to explain how forks work, but some concepts are only understandable when we write our own code. I had to write my own in order to raise my comfort level with forks.</p>

<p>Here&#8217;s what the code does:</p>

<ul>
<li>In the parent process, <code>fork</code> returns the <code>pid</code> of the child process.</li>
<li>In the child process, <code>fork</code> returns <code>nil</code>.</li>
<li>Therefore, the <code>if</code> block should be executed by the parent process&#8230;</li>
<li>&#8230;and the <code>else</code> block should be executed by the child process.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Parent process pid (before fork) is </span><span class="si">#{</span><span class="no">Process</span><span class="o">.</span><span class="n">pid</span><span class="si">}</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">fork</span>
</span><span class='line'>  <span class="n">current_process</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'>  <span class="n">parent_process</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">ppid</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;Entered the *if* block during Process </span><span class="si">#{</span><span class="n">current_process</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">The parent of this process is </span><span class="si">#{</span><span class="no">Process</span><span class="o">.</span><span class="n">ppid</span><span class="si">}</span><span class="s2">, which should be bash.</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">current_process</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'>  <span class="n">parent_process</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">ppid</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;Entered the *else* block during Process </span><span class="si">#{</span><span class="n">current_process</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">The parent of this process is </span><span class="si">#{</span><span class="n">parent_process</span><span class="si">}</span><span class="s2">, which should be the original of this process.</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the above Ruby code produces the following results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ruby forking_around.rb
</span><span class='line'>Parent process pid <span class="o">(</span>before fork<span class="o">)</span> is 79703.
</span><span class='line'>Entered the *if* block during Process 79703.
</span><span class='line'>The parent of this process is 76751, which should be bash.
</span><span class='line'>
</span><span class='line'>Entered the *else* block during Process 79704.
</span><span class='line'>The parent of this process is 79703, which should be the original of this process.
</span></code></pre></td></tr></table></div></figure>


<p>Digging further: Let&#8217;s look at the names that correspond to our
<code>pids</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ps -p 79703
</span><span class='line'>  PID TTY           TIME CMD
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ps -p 79704
</span><span class='line'>  PID TTY           TIME CMD
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ps -p 76751
</span><span class='line'>  PID TTY           TIME CMD
</span><span class='line'>76751 ttys003    0:00.40 -bash
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>We get zero data for the <code>pids</code> 79703 and 79704 because those processes terminated with the program <code>forking_around.rb</code>. However, 76751 shows <code>bash</code> because bash is still running.</p>

<p>The book is full of rich playground examples that go much deeper than this. Time slips away when I get rolling with this stuff!</p>

<h3>Errata Handling</h3>

<p>The book is new so you can expect a few typos. If you run into problems with sample code, a quick Google search will lead you to the corrected text. For example, early in the book I had problems with a command that returns the maximum number of processes allowed on a system. Turns out there was a typo, and <a href="http://forums.pragprog.com/forums/261/topics/11191">the correction</a> was posted by the author himself on the publisher&#8217;s errata page.</p>

<h3>Conclusion</h3>

<p>I enjoyed reading <em>Working With Unix Processes</em> because it replaces a belief in &#8220;the magic of Unix&#8221; with a sound understanding of Unix fundamentals. The book is clear and brief with plenty of examples. The author assumes that readers have at least a basic understanding of Ruby. After that, you only need a command line, IRB, and the willingness to explore.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Makers, Objective-C, and RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion/"/>
    <updated>2012-12-14T06:45:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/ipad-iphone.jpg" width="256" height="250" alt="iPad iPhone" title="iPad iPhone" align="right">
This week I enrolled in the iOS Accelerated course offered by the <a href="http://mobilemakers.co/ios-accelerated">Mobile Makers Academy</a>. If you would like to do the same, mention my name and we&#8217;ll both receive a $300 discount on tuition.</p>

<p>Class starts on Jan 7, 2013. The evening lectures are convenient for those who serve clients by day.</p>

<p>Of course, a tuition discount and easy schedule are poor reasons to enroll in a course. This article will describe my reasons for enrolling. If your thirst for learning is anything like mine, you might like Mobile Makers too.</p>

<!--more-->


<h4>Background and Expectations</h4>

<p>My background includes an undergrad degree in computer science. Over the years, I&#8217;ve coded in C, Lisp, Fortran, Pascal, x86 assembler, and Ruby. I became a &#8220;business guy&#8221; when I launched WisdomGroup eighteen years ago. WisdomGroup is fortunate to have a team of strong technologists who keep our clients happy while teaching me more every day.</p>

<p>In late 2011, I began to focus on sharpening my personal technical skills, and that led to my immersion in <a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> this year. I expect the Mobile Makers experience to strengthen my grasp of Objective-C, OO theory, and iOS. Cross-training with Objective-C will boost my RubyMotion skills as well.</p>

<h4>Instruction Format</h4>

<p><a href="https://twitter.com/dbora">Don Bora</a> is the head instructor at Mobile Makers. Don is embarrassed when I say this, but he&#8217;s the main reason why I chose to enroll. Don is a true polyglot programmer, with a background that includes Objective-C (of course!), C#, Java, Ruby, and Smalltalk among other languages. He currently builds Objective-C apps for his clients at <a href="http://eightbitstudios.com/">Eight Bit Studios</a>. Don holds degrees in computer science and linguistics.</p>

<p>Mobile Makers offers a learning format that is relatively new to me. Beyond the traditional classroom lectures, students get plenty of time for lab immersion and interaction with mentors. I first witnessed this format when Neal Sales-Griffin and Mike McGee launched <a href="http://starterleague.com">The Starter League</a>.</p>

<h4>More About Lab Time and Mentorship</h4>

<p>Classroom sessions are fine, but they&#8217;re not enough. Can you learn a musical instrument by listening to lectures and taking notes? Mastering a skill like software development requires deliberate practice with challenging exercises. Learning is accelerated when lectures, labs, and mentorship complement each other.</p>

<h4>Learning Architecture</h4>

<p>Behind the scenes, Adam Lupu is the learning architect who designed the Mobile Makers curriculum. In Don&#8217;s words: &#8220;I know how to explain things, but I don&#8217;t know how to structure a course. That&#8217;s where Adam comes in.&#8221; Adam was the lead architect behind the Rails-based curriculum at the Starter League. Now he&#8217;s building the mobile curriculum at Mobile Makers.</p>

<h4>Excitement</h4>

<p>The Mobile Makers <a href="http://mobilemakers.co/ios-accelerated">iOS Accelerated</a> class is only three weeks away. If you mention this blog post, you and I will both get a $300 tuition discount. More important, we will acquire skills that will serve us well as we solve problems for clients. What an exciting time to be a developer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design and Big Ideas]]></title>
    <link href="http://RayHightower.com/blog/2012/12/08/design-and-big-ideas/"/>
    <updated>2012-12-08T00:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/08/design-and-big-ideas</id>
    <content type="html"><![CDATA[<p>WisdomGroup is hiring a <a href="https://jobs.chicagoruby.org/jobs/100">web design intern</a>. Our current volume of work requires it. The ideal candidate will share our beliefs about design, summarized as&#8230;</p>

<blockquote><p>Design is not just what it looks like and feels like. Design is how it works. ~Steve Jobs</p></blockquote>

<p>Great design is functional and inspiring. Autodesk captures the idea in this ad from several years ago:</p>

<center><iframe name="autodesk" width="560" height="315" src="http://www.youtube.com/embed/jrK4rTkKLDg?rel=0" frameborder="0" allowfullscreen></iframe></center>




<!--more-->


<p>Text from the Autodesk ad:</p>

<blockquote><p>For every serious challenge facing the world there is someone with a big idea. That big idea needs to be nurtured. It needs to be explored and analyzed in order to bring it to life.</p>

<p>And design is at the core of that innovation.</p>

<p>Our technology gives innovators the ability to see how their ideas perform and behave. To exprience it before it&#8217;s real.</p>

<p>There isn&#8217;t a problem in the world that a great designer can&#8217;t solve.</p></blockquote>

<p>If you know a solid candidate for WisdomGroup&#8217;s Web Design Internship, please point them to the <a href="https://jobs.chicagoruby.org/jobs/100">job description</a>. Thanks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Raspberry Pi]]></title>
    <link href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/"/>
    <updated>2012-12-03T06:38:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/assets/raspberry_pi_iphone.jpg" width="400" align="right" title="Raspberry Pi Circuit Board" alt="Raspberry Pi Circuit Board">
Raspberry Pi is a single-board computer roughly the size of a deck of cards. It&#8217;s equipped with an ARM processor that runs Linux. USB ports let you attach a keyboard and mouse. Video is supported via HDMI and RCA. Storage is handled by SD cards. There&#8217;s an Ethernet port.</p>

<p>You can buy a Raspberry Pi for $35.00.</p>

<h4>Will it Run Ruby?</h4>

<p>When my Raspberry Pi arrived, I was curious: Will it run Ruby? How about Rails?  This article describes my experience with RVM, Ruby, and Rails on a Raspberry Pi, along with the &#8220;gotchas&#8221; I encountered along the way.</p>

<!--more-->


<h4>Why Raspberry Pi?</h4>

<p>Raspberry Pi was created by a group of UK educators and engineers with a concern: Inexpensive hobbyist computers like the old Commodore 64 no longer exist. Game consoles continue to get better, but there is no replacement for the Commodore. As a result, young people who <em>might</em> become developers get introduced to the profession as gamers or users of Word or Excel. They begin as consumers, not creators. Sad news, because creators shape the world we all enjoy.</p>

<p>Creators get stronger when they have tools for learning, play, and <a href="http://RayHightower.com/blog/2012/09/03/10000-hours-of-practice/">10,000 hours of practice</a>. Enter Raspberry Pi. It&#8217;s a tiny, inexpensive computer. It runs open source software so it is highly accessible to curious minds that are eager to learn, practice, and play.</p>

<h4>Yes, It Will Run Ruby</h4>

<p>Here&#8217;s a screenshot from my Raspberry Pi with the Midori web browser, RVM, Ruby 1.9.3-p327, Rails 3.2.9, Vim 7.3, and other tools. In this shot, I&#8217;m using the Pi&#8217;s HDMI output to drive a 1080p monitor.</p>

<p><img src="http://RayHightower.com/assets/RaspberryPi-Desktop.png" width="800" align="middle" title="Raspberry Pi 1080p HDMI Monitor" alt="Raspberry Pi 1080p HDMI Monitor" ></p>

<p>Yes, this tiny, $35 device will drive a monitor at full 1080p HD.</p>

<h4>Getting Started</h4>

<p>Here&#8217;s what you need to get Ruby running on your Raspberry Pi.</p>

<ul>
<li>1 Raspberry Pi with 512MB RAM or more. I bought mine from <a href="http://newark.com">Newark/element14</a>.</li>
<li>1 Monitor that accepts HDMI or RCA video input.</li>
<li>1 HDMI or RCA cable, depending on your monitor.</li>
<li>1 USB keyboard</li>
<li>1 USB mouse</li>
<li>1 8GB (or larger) SD card. The instructions recommend 4GB, but I suggest at least 8GB if you expect to run Rails. You&#8217;ll need room for gems, git, etc.</li>
<li>1 Ethernet cable w/RJ-45 ends.</li>
<li>1 high-speed Internet connection.</li>
<li>A separate computer capable of writing an SD card image, or an SD card pre-configured for Raspberry Pi.</li>
</ul>


<p>The Pi makers have tested the device with SD cards as large as 32GB, even though 4GB is recommended. Personally, I prefer the larger cards because they allow more room for experiments.</p>

<h4>Prepping the SD Card</h4>

<p>The Pi&#8217;s operating system boots from the SD card. There are several methods for prepping the SD card with the Raspberry Pi system. The easiest: Buy a Pi with a pre-configured SD card.</p>

<p>My Pi arrived before the pre-configured SD card. I&#8217;m a little bit impatient when it comes to new gadgets, so I decided to prep an old SD card of my own.</p>

<p><em>Note:</em> If you&#8217;re reading this article, you already know the standard disclaimer about how technology changes rapidly therefore this procedure could be wrong by the time you read this. I&#8217;ve included links to references so you can check for updates on your own. You know the risks. Please backup everything that needs it.</p>

<p>References:</p>

<ul>
<li><a href="http://elinux.org/RPi_Easy_SD_Card_Setup">eLinux SD Card Setup</a>. Methods for putting your preferred image on the SD card. I chose the &#8220;Copying an image to the SD card in Mac OS X (mostly graphical interface)&#8221; method.</li>
<li><a href="http://www.raspberrypi.org/downloads">Raspberry Pi Official Downloads</a>. Several SD card images, and a beginners wiki.</li>
</ul>


<p>Prepping an SD card takes a <em>long</em> time. In my case, it took 23 minutes from the time I executed the SD write command (<code>$ sudo dd...</code>) to the completion of the process. It was a little disconcerting because the system didn&#8217;t do anything during that time. No feedback whatsoever. Sounds like an opportunity for a pull request!</p>

<h4>Starting the System</h4>

<p>To start your Raspberry Pi system:</p>

<ul>
<li>Plug the SD card, USB keyboard &amp; mouse, Ethernet cable, and video cable (HDMI or RCA) into their corresponding sockets.</li>
<li>Plug in the USB power adapter.</li>
</ul>


<p>There is no power switch. The device is turned on/off by adding or removing the power cable.</p>

<p>Linux will boot in text mode. When the system is done booting, you will be prompted for a username and password. Here are the default credentials:</p>

<pre><code>
raspberrypi login: pi
Password: raspberry
</code></pre>


<p>Several seconds later, you will be greeted with the $ prompt. You can continue to use the Pi in text mode, or you can start the X Window GUI with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>startx
</span></code></pre></td></tr></table></div></figure>


<h4>Ruby with RVM</h4>

<p>I am a big fan of <a href="http://rvm.io">Ruby Version Manager (RVM)</a>. I learn best when I break things. RVM&#8217;s handling of Ruby versions and gemsets enables me to recover rapidly and well.</p>

<p>This command will install the latest stable versions of RVM and Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -L https://get.rvm.io | bash -s stable --ruby
</span></code></pre></td></tr></table></div></figure>


<p>It took over an hour for Ruby to compile on my Pi. The read/write speed of my SD card (Class 4) could have been a factor. I have a faster (Class 10) SD card on order.</p>

<h3>Installing Rails</h3>

<p>First, make sure you&#8217;re using the version of Ruby you want to use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm current
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a gemset and tell RVM that you want to use it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm use <span class="o">[</span>version of Ruby you want to use<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>rvm gemset create firstgemset
</span><span class='line'><span class="nv">$ </span>rvm gemset use firstgemset
</span></code></pre></td></tr></table></div></figure>


<p>And then install Rails as you would on any other &#8216;nix-based machine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install rails
</span></code></pre></td></tr></table></div></figure>


<h4>Gotchas</h4>

<p>The installation process was relatively smooth. Still, here are a few gotchas I encountered with the Pi:</p>

<ul>
<li>I already mentioned this, but it&#8217;s worth repeating: It took 23 minutes to write the SD card, and there was no feedback along the way. This wasn&#8217;t a big deal since I had been pre-warned by one of the wikis.</li>
<li>apt-get needed an update before I could install git. <code>$ sudo apt-get update</code> did the trick.</li>
<li>The Pi will do absolutely nothing without a properly configured SD card. You know how a PC will partially boot (to CMOS) even without a hard drive? Not so with the Pi.</li>
<li>The micro-USB power port requires 700mA or more of current. Most micro-USB power adapters deliver 500mA or less. Raspberry Pi will only boot if the micro-USB provides sufficient amperage. Only one of my several micro-USB adapters met this requirement.</li>
<li>A 4GB SD card is far too small if you want to do something useful with the Pi. My first Rails installation failed due to size limitations because I was using a 4GB card. Go with 8GB or larger.</li>
<li>I&#8217;m not 100% sure, but I think that a faster SD card will make a difference especially during the compilation of the Ruby interpreter. This is only a guess at this point. I don&#8217;t yet know where the bottlenecks are.</li>
</ul>


<p>Overall, the gotchas were minor.</p>

<h4>For Screenshots, Try Scrot</h4>

<p>To take screenshots of the Raspberry Pi desktop, I used Scrot (SCReenshOT). Here&#8217;s how to install Scrot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install scrot
</span></code></pre></td></tr></table></div></figure>


<p>After you install Scrot, this command will take a shot of the entire desktop and drop it into a file called <code>desktop.png</code> in your home directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>scrot ~/desktop.png
</span></code></pre></td></tr></table></div></figure>


<p>To pause five seconds before taking the screenshot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sleep 5; scrot ~/desktop.png
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://RayHightower.com/assets/raspberry-pi-analog-TV.jpg" width="400" align="right" title="Raspberry Pi Analog TV Monitor" alt="Raspberry Pi Analog TV Monitor" ></p>

<h4>Analog TV</h4>

<p>Don&#8217;t laugh: I still have an old analog TV in my living room. It&#8217;s twelve years old and it still works. Since Raspberry Pi comes with multiple video outupts, analog TVs are useful again.</p>

<p>Here&#8217;s Raspberry Pi running with my old analog TV as a monitor. Reminds me of the Commodore 64 days!</p>

<p>Raspberry Pi will work with a wide range of monitors, from HDMI to ancient analog. That makes the Pi accessible to a large audience of hobbyists and developers.</p>

<h4>Conclusion</h4>

<p>Raspberry Pi will never replace my primary machine because it&#8217;s too slow. But it is certainly fast enough for learning. It meets the goals set forth by the engineering team.</p>

<p>I am excited by the learning opportunities offered by Raspberry Pi. To the Raspberry Pi Foundation: Thank you for an impressive device. I wish you much success.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Long Tail Opportunities]]></title>
    <link href="http://RayHightower.com/blog/2012/11/19/long-tail-opportunities/"/>
    <updated>2012-11-19T06:58:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/11/19/long-tail-opportunities</id>
    <content type="html"><![CDATA[<p>You are already familiar with the <a href="http://en.wikipedia.org/wiki/80/20_rule">80/20 rule</a>. In the late 1800s an Italian economist discovered that 80% of the wealth in his country was owned by 20% of the people. More recently we find that the 80/20 rule applies in other areas of our lives. Professional service firms find that eighty percent of the revenue comes from twenty percent of the clients. Merchants find that eighty percent of sales comes from twenty percent of the products. Winners at the very top of any field tend to win by a large margin.</p>

<!--more-->


<p></p>

<h4>Another View of the 80/20 Rule</h4>

<p><a href="http://www.thelongtail.com/about.html">The Long Tail</a> by Chris Anderson offers another way to look at the 80/20 rule. Our business example: A book store. The graph below shows book sales ranked by sales volume. Best-sellers are on the left side of the chart (in green) while slower sellers fill in the curve toward the right. Since shelf space is limited and expensive, the store only carries the most popular books along the left side of the chart. Smart application of the 80/20 rule, right? Maybe.</p>

<p><img src="http://RayHightower.com/assets/TheLongTail.png" align="center" alt="The Long Tail" title="The Long Tail"></p>

<h4>The Long Tail: Everything Else</h4>

<p>High-volume books sell much more than other books. High-volume books (the short head) are the 20 percent that generate 80 percent of the revenue. The Long Tail is made up of everything else.</p>

<p>When a book store chooses to carry 20% of the available titles, how do they decide which 20% to carry? How do they predict the hits in advance?</p>

<p>Answer: They can&#8217;t. Sometimes a sure hit fizzles into a dud, while a &#8220;sleeper&#8221; rockets to the best-seller list. A similar problem is faced by movie distributors, retail stores, and other businesses. How do you profit from hits that you cannot predict?</p>

<h4>The Long Tail in 1897</h4>

<p>Sears, Roebuck &amp; Co. is one of the oldest Long Tail companies in the USA. If you wanted to buy a product in late 1800&#8217;s America, you would visit the general store. Most Americans lived on farms at that time, so visiting the store meant riding into town. Product selection was limited to the items on the store shelf. Shopping for a better price meant traveling to the next town &#8211; a tough journey in the days before automobiles.</p>

<p>Sears entered the scene in 1897. Launching in the middle of the railroad boom gave Sears access to a cheap delivery system for both suppliers and customers. Efficient warehouses located at the country&#8217;s busiest railroad hub, Chicago, maximized their distribution leverage. The result: The cozy general store system was disrupted by the Sears catalog, 786-pages filled with more products and better prices.</p>

<p>Note that the Sears catalog did not put the general store completely out of business. Impulse buyers still shopped at the general store. But Sears certainly shook things up by making Long Tail products available for everybody.</p>

<h4>The Long Tail in 1994</h4>

<p>In 1994 a math geek named Jeff Bezos was reviewing Internet investment opportunities. Bezos observed that book sellers were expanding their physical stores, but none were expanding on the web. He smelled an opportunity. Bezos believed that a new distribution system (the web) could make a wider selection (the Long Tail) available to the world. Amazon.com was born.</p>

<p>Sears launched in the middle of the railroad boom, and Bezos launched Amazon.com in the middle of the first Internet boom. Sears benefited from inexpensive distribution via railroads, while Amazon distributes its catalog virtually free via the web. Great business ideas often repeat themselves.</p>

<h4>The Long Tail Today</h4>

<p>Do you remember record stores? Record stores had a problem &#8211; limited shelf space. Store managers had to figure out which records to stock by predicting (in advance) which records would sell best &#8211; the 80/20 rule again.</p>

<p>Some people argue that record stores were destroyed by free music downloads. However, &#8220;free&#8221; was only part of the problem. The bigger challenge came from the wider selection (Long Tail) offered through music downloads. In January 2009, Apple announced that over six billion songs had been downloaded through iTunes at 99 cents each. Apple&#8217;s distribution costs are virtually zero thanks to iTunes.</p>

<p>Apple found abundant opportunities in the Long Tail of music distribution. Video entertainment is next.</p>

<h4>What About the Crud?</h4>

<p>Some argue that there is a reason why some products are in the Long Tail instead of the short head: If you consider the entire spectrum of any product type, a large percentage of it is crud. The music industry is one example. True, the &#8220;better&#8221; music gets recorded by a large music studio or played on radio stations. But the Long Tail is full of music that never made it that far &#8211; from the amateur taking his first lesson to the garage band with great musical skills and bad marketing.</p>

<p>Of course, one person&#8217;s crud is another person&#8217;s masterpiece. Musical tastes vary widely. The Long Tail works in the digital music business because it makes tiny niches of music available to people who want them.</p>

<h4>The Long Tail Future</h4>

<p>Given the success of Long Tail companies (like Sears, Amazon, and Apple) one might wonder if there are any Long Tail opportunities left in our economy. The answer is yes! Anderson argues that a Long Tail company needs to do two things to succeed:</p>

<ol>
<li>Make a wide selection available, from the short head and the Long Tail.</li>
<li>Help customers find what they want.</li>
</ol>


<h4>Everything, Easy to Find</h4>

<p>If you make everything available, customers could become annoyed if they have to sift through it. So we have to make it easy for them to find exactly what they want.</p>

<p>Sears made everything available through railroads, and they solved the sifting problem with the Sears catalog. The catalog served as a convenient way for customers to find the products they wanted.</p>

<p>Amazon&#8217;s recommendation software is wonderful &#8211; unless you&#8217;re a customer trying to save money! The engine examines a customer&#8217;s past purchases and uses that information to suggest future purchases. Human clerks have done the same thing for centuries. But Amazon&#8217;s software does it faster with  zero vacation days.</p>

<p>Apple makes everything available and easily searchable through iTunes.</p>

<h4>Conclusion</h4>

<p>History shows that Long Tail opportunities tend to coincide with the introduction of disruptive technologies. Railroads and the Internet are two examples. Sears could not have existed in catalog form before railroads. Amazon could not have offered the long tail of book selection without the Internet. In both cases, the advent of a faster &amp; cheaper distribution system was a catalyst for a powerful new business model.</p>

<p>Are there any Long Tail opportunities left in today&#8217;s marketplace? Yes. And the next Long Tail enterprise might be launched by you.</p>

<h4>Suggested Reading</h4>

<p><a href="http://www.amazon.com/Long-Revised-Updated-Edition-ebook/dp/B000JMKSE2">The Long Tail</a>, by Chris Anderson. The drastic reduction in the cost of distribution for digital information has far-reaching effects upon our economy. As a result, some businesses will thrive while others will die.</p>

<p><em>Note: A version of this post originally appeared on the <a href="http://wisdomgroup.com">WisdomGroup Blog</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Your Competition Irrelevant]]></title>
    <link href="http://RayHightower.com/blog/2012/11/10/make-your-competition-irrelevant/"/>
    <updated>2012-11-10T02:55:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/11/10/make-your-competition-irrelevant</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/assets/blue_ocean_strategy.png" align="right" alt="Blue Ocean Strategy" title="Blue Ocean Strategy"></p>

<h4>Path to Victory</h4>

<p>A skillfully executed business strategy is one path to victory. Many strategy books will tell business owners how to win at the expense of the competition, how to take market share away from the competition, and so on.</p>

<p>The book <em>Blue Ocean Strategy</em> proposes a non-typical path to victory over the competition. According to the authors, following a blue ocean strategy will make your competition irrelevant.</p>

<!--more-->


<h4>Competitive Red Oceans</h4>

<p>First, some definitions. The authors divide the business world into two oceans: red and blue. Red oceans are markets where competition is stiff and companies battle fiercely. The ocean is red with the blood of business gladiators who cut each other to shreds with competing offerings. Margins tend to be low because customers have many identical options to choose from. Customers view red ocean products as commodities.</p>

<h4>Undiscovered Blue Oceans</h4>

<p>But blue oceans are undiscovered markets. Blue ocean companies offer products and services that are so full of value that customers pay premium prices for the better value. Competition is scarce (and the water remains blue) because blue ocean markets tend to be new. Few companies have figured out how to find the blue ocean. Customers are pleased because blue ocean offerings contain features beyond those found in typical (red ocean) products. Customers willingly pay higher prices for the increased value found in blue ocean products.</p>

<blockquote><p>Blue ocean products deliver more value, therefore
customers are willing to pay more
to have them.</p></blockquote>

<h4>Example: Red Ocean Circus</h4>

<p>Say the word “circus” to a person of a certain age and they will immediately think “Ringling Brothers.” The Ringling Brothers Barnum &amp; Bailey Circus owned the American circus market for decades. Small regional players competed for crumbs. But by the 1980’s, circus audiences were shrinking and even Ringling Brothers had trouble keeping pace. Kids who once begged their parents for circus tickets wanted the latest computer games instead. The market, as a whole, was struggling for new customers and revenue was on the decline.</p>

<p>To make matters worse, expenses were increasing. Animals eat every day and food prices continue to rise. Animals require trainers, and trainers require salaries. Circus “stars” demand star treatment in an industry where the customers, accustomed to Hollywood celebrities, no longer find the stars of the circus impressive.</p>

<p>In short, the circus industry was a red ocean. Revenue was on the decline as costs continued to rise. Profits were squeezed.</p>

<h4>Blue Ocean Circus</h4>

<p>But a Montreal street performer had a bold new idea. Create a new kind of circus. Eliminate animals and eliminate the cost of feeding them. Avoid “star” performers in favor of an ensemble cast including former Olympic athletes. Direct the marketing focus toward a completely new clientele: adults instead of kids. Recognize that adult customers will pay more money for a higher level of entertainment. Build elements of high-end entertainment (such as Broadway theatre) into the new “circus.”</p>

<p>The result: A brand new blue ocean in the form of Cirque du Soleil. The Montreal street performer, Guy Laliberte, achieved billionaire status through his new blue ocean. Another benefit: Customers willingly travel to places like Las Vegas to see Cirque du Soleil. So performers spend less time on the road than they would with a “traditional” circus. Performers enjoy a higher quality of life because they spend less time away from home and more time with their families. Some benefits, like this, are more important than any financial upside.</p>

<h4>Another Red Ocean: Intimidating Wine</h4>

<p>Wine drinkers know that the process appears intimidating and pretentious to the novice buyer. Personally, I know little of the industry jargon: I’ve picked up words like “vintage” and “legs” but beyond that, I’m clueless. And I’m not alone. An Australian wine company, Casella Wines, discovered that millions of prospective customers were as clueless as me.</p>

<blockquote><p>If the market has already been defined by
your competitors, you are operating in a red ocean.
Why play a game created and dominated by your competitors? Successful
blue ocean companies never battle incumbents head-on.
They re-write the rules.</p></blockquote>

<h4>Blue Ocean: Inviting Wine</h4>

<p>Casella wines decided to challenge the entire industry with a brand new wine, [yellow tail]. Casella could have sold its product to the existing population of wine buyers (red ocean). However, strategists at the company tapped latent demand for wine among non-wine buyers, people who avoided wine because they didn’t want to learn all the mumbo jumbo. People like beer drinkers, a market three times the size of wine drinkers. So [yellow tail] was marketed without all of the typical focus on vintages, years, etcetera.</p>

<p>The result: [yellow tail] discovered a blue ocean of new customers. People who had rarely bought wine before began to buy [yellow tail]. Yes, [yellow tail] wooed customers away from their competitors, but it’s more important to note that they grew the entire wine market. The new brand continues to grow aggressively in an industry previously thought to be mature.</p>

<h4>Red Oceans and Old Rules</h4>

<p>If you’re running an aggressive company, and the market has already been defined by your competitors, you are operating in a red ocean. Who says you need to compete there? Why play a game created and dominated by your competitors? Successful blue ocean companies never battle incumbents head-on. They re-write the rules.</p>

<h4>The Next Blue Ocean: Where?</h4>

<p>If blue oceans are so great, where do we find them? What industries offer the best blue ocean opportunities? Which companies are best at finding blue oceans in existing industries?</p>

<p>Through their study of many industries and companies, the authors learned that there are no permanently excellent companies, and no permanently excellent industries. Blue ocean examples can be found in mature (or presumed dead) industries such as circus entertainment and dinner wine. One key to discovering the next blue ocean is something called value innovation.</p>

<h4>Value Innovation</h4>

<p>Value innovation is delivering a product or service in a manner that is both creative and relevant to the customer.</p>

<p>Value without innovation leads to minor incremental improvement. In the circus example, adding more animals might add value, but only in a same-old-stuff kind of way.</p>

<p>Innovation without value tends to be futuristic. Technology for technology’s sake. Although customers may find the innovation fascinating, they won’t pay for it without value. An example: Personal computers in the 1970’s. PCs were innovative, but they didn’t deliver value until the creation of useful business applications like electronic spreadsheets (Lotus 1-2-3, Microsoft Excel) and email.</p>

<p>Value innovation is a fruitful marriage between value and innovation. It’s delivering something creative that customers care about and will pay for. Value innovation is not necessarily cutting edge. Elements of Cirque du Soleil are seen in other forms of entertainment. [yellow tail] is not the first wine ever sold.</p>

<p>Rather, both of these examples combine value and innovation in creative ways. Each attracts new customers (adults, non-wine drinkers), eliminates things that add no value (animals, intimidation &amp; pretentiousness), and add elements that customers are willing to pay for (drama, fun beverages).</p>

<h4>That’s Not All</h4>

<p>A two-page newsletter cannot cover everything in Blue Ocean Strategy. The authors, W. Chan Kim and Renee Mauborgne, include many more example companies and frameworks for navigating your company to the next blue ocean.</p>

<h4>Caution: Have a Plan</h4>

<p>He who ventures beyond his current red ocean without a plan will wind up in a puddle. The authors caution against pursuing blue oceans based on gut instinct. Have a plan, and wear a life vest!</p>

<p><em>Note: A version of this post originally appeared on the <a href="http://wisdomgroup.com">WisdomGroup Blog</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building iOS Apps With RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/"/>
    <updated>2012-10-29T18:49:00-05:00</updated>
    <id>http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion</id>
    <content type="html"><![CDATA[<p>Special thanks to the organizers of <a href="http://magic-ruby.com/">MagicRuby</a> and <a href="http://aloharubyconf.com/">Aloha Ruby</a> for inviting me to present RubyMotion at their respective conferences. <a href="http://confreaks.com/videos/1245-aloharuby2012-building-ios-apps-with-rubymotion">Confreaks</a> recorded video at the Aloha Ruby event.</p>

<center>
<iframe name="rubymotionaloha" width="560" height="315" src="http://www.youtube.com/embed/3gCsen5Zs4s" frameborder="0" allowfullscreen></iframe>
</center>


<p>The fizzbuzz sample code can be found on <a href="https://github.com/RayHightower/fizzbuzzrm">GitHub</a>. Slides are on <a href="https://speakerdeck.com/rayhightower/building-ios-apps-with-rubymotion">SpeakerDeck</a>.</p>

<p>Should you use RubyMotion or Objective-C for iOS development? That depends&#8230;</p>

<!--more-->


<p>If your team is currently building web apps, and they happen to be Ruby-focused, then RubyMotion will enable you to create a <a href="http://rayhightower.com/blog/2012/08/31/four-steps-five-minutes/">minimum viable product (MVP)</a> using skills that you already have in-house. However, if your team is currently Objective-C focused, it may be easier for you to build your MVP in Objective-C.</p>

<p>Keep in mind that I am Ruby-biased, so I see advantages on the RubyMotion side of the question. Building the web <em>and</em> mobile pieces of an app in the same language means that expertise can be readily shared throughout the team. Shared expertise makes the team stronger.</p>

<p>Thanks again to MagicRuby and Aloha Ruby for asking me to speak, and to Confreaks for recording the talk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RubyMotion With Xcode's Interface Builder]]></title>
    <link href="http://RayHightower.com/blog/2012/10/18/using-rubymotion-with-interface-builder/"/>
    <updated>2012-10-18T18:34:00-05:00</updated>
    <id>http://RayHightower.com/blog/2012/10/18/using-rubymotion-with-interface-builder</id>
    <content type="html"><![CDATA[<h4>Executive Summary</h4>

<p><a href="http://www.rubymotion.com/">RubyMotion</a> is a Mac application that lets developers write iOS apps in
Ruby. It&#8217;s possible to create the user interface for the app entirely
within RubyMotion or with a Ruby gem like <a href="https://github.com/rubymotion/teacup">Teacup</a>. But what about devs who prefer Interface Builder?</p>

<p>This article will show how to use Xcode&#8217;s Interface Builder to create a basic UI for
a RubyMotion application.</p>

<!-- more -->


<p><img src="http://RayHightower.com/assets/fizzbuzzrm.png" width = "200" align = "right"
alt="Interface Builder with RubyMotion" title="Interface Builder with RubyMotion"></p>

<h4>Our Sample App: FizzBuzz</h4>

<p>For this example we will build an iOS app that calculates and displays
the fizzbuzz function. As a refresher, here&#8217;s the fizzbuzz algorithm:</p>

<ol>
<li>Count integers starting with 1 and incrementing as high as the user wants to go.</li>
<li>If the integer to be displayed is a multiple of 3, display &#8220;fizz&#8221; instead.</li>
<li>If the integer to be displayed is a multiple of 5, display &#8220;buzz&#8221; instead.</li>
<li>If the integer to be displayed is a multiple of both 3 and 5 (i.e. a multiple of 15) display &#8220;fizzbuzz&#8221;.</li>
</ol>


<p>The bare-bones UI appears at right. The plus sign increments the
counter, minius decrements it, and the label area shows &#8220;Begin&#8221; at
the beginning.</p>

<h4>First, Build the RubyMotion App</h4>

<p>We start by building the fizzbuzz app in RubyMotion.</p>

<p><code>
$ motion create fizzbuzzrm
</code></p>

<p>The code for the finished app can be found on <a href="http://github.com/rayhightower/fizzbuzzrm">GitHub</a>.</p>

<h4>Build the UI in Interface Builder</h4>

<p>Next, build the UI in Xcode&#8217;s Interface Builder.</p>

<p>After completing the interface, we will need to asign tags to each
element so that the UI knows how to communicate with RubyMotion. Scroll
down to View|Tag in the rightmost colum (screenshot below). In this
example, I assigned the tags 1, 2, 3, and 4 to the label, plus button,
minus button, and reset, respectively.
<img src="http://RayHightower.com/assets/tag1.png" alt="Interface Builder With RubyMotion" title="Interface Builder with RubyMotion"></p>

<p>Save the IB file in the <code>/resources</code> directory of your
RubyMotion project. In my example, I called the file
<code>fbib.xib</code>. RubyMotion will compile the .xib file next time
you run the rake command to build the app.</p>

<h4>Connecting the .xib file to the RubyMotion App</h4>

<p>Let&#8217;s head back to the RubyMotion app so we can tell RubyMotion how to
interact with the IB file. Note that we specify the name of the IB file
on the second line of the <code>loadView</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">loadView</span>
</span><span class='line'>    <span class="n">views</span> <span class="o">=</span> <span class="no">NSBundle</span><span class="o">.</span><span class="n">mainBundle</span><span class="o">.</span><span class="n">loadNibNamed</span> <span class="s2">&quot;fbib&quot;</span><span class="p">,</span> <span class="n">owner</span><span class="ss">:self</span><span class="p">,</span> <span class="n">options</span><span class="ss">:nil</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">view</span> <span class="o">=</span> <span class="n">views</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@view_handle</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">view</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>viewDidLoad</code> method is where we assign buttons to their corresponding
methods, and we specify how the app should behave when each button is
pressed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">viewDidLoad</span>
</span><span class='line'>    <span class="vi">@label</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">viewWithTag</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">plus_button</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">viewWithTag</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">minus_button</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">viewWithTag</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">reset_button</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">viewWithTag</span> <span class="mi">4</span>
</span><span class='line'>    <span class="c1"># background_area = view.viewWithTag 5</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">plus_button</span><span class="o">.</span><span class="n">addTarget</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">action</span><span class="ss">:&#39;plusTapped:&#39;</span><span class="p">,</span> <span class="n">forControlEvents</span><span class="ss">:UIControlEventTouchUpInside</span><span class="p">)</span>
</span><span class='line'>    <span class="n">minus_button</span><span class="o">.</span><span class="n">addTarget</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">action</span><span class="ss">:&#39;minusTapped:&#39;</span><span class="p">,</span> <span class="n">forControlEvents</span><span class="ss">:UIControlEventTouchUpInside</span><span class="p">)</span>
</span><span class='line'>    <span class="n">reset_button</span><span class="o">.</span><span class="n">addTarget</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">action</span><span class="ss">:&#39;resetTapped:&#39;</span><span class="p">,</span> <span class="n">forControlEvents</span><span class="ss">:UIControlEventTouchUpInside</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># background_area.addTarget(self, action:&#39;backgroundTapped:&#39;, forControlEvents:UIControlEventTouchUpInside)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, let&#8217;s define a method for each button.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">plusTapped</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="vi">@label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="no">FizzBuzzViewController</span><span class="o">.</span><span class="n">fbcalc</span><span class="p">(</span><span class="vi">@counter</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">minusTapped</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@counter</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="vi">@label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="no">FizzBuzzViewController</span><span class="o">.</span><span class="n">fbcalc</span><span class="p">(</span><span class="vi">@counter</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">resetTapped</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;Begin&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rotate_background</span><span class="p">(</span><span class="vi">@view_handle</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rotate_background</span><span class="p">(</span><span class="n">view_handle</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@color_index</span> <span class="o">||=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="vi">@color_index</span>
</span><span class='line'>    <span class="k">when</span> <span class="mi">0</span>
</span><span class='line'>      <span class="vi">@view_handle</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="no">UIColor</span><span class="o">.</span><span class="n">redColor</span>
</span><span class='line'>    <span class="k">when</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@view_handle</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="no">UIColor</span><span class="o">.</span><span class="n">greenColor</span>
</span><span class='line'>    <span class="k">when</span> <span class="mi">2</span>
</span><span class='line'>      <span class="vi">@view_handle</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="no">UIColor</span><span class="o">.</span><span class="n">blueColor</span>
</span><span class='line'>    <span class="k">when</span> <span class="mi">3</span>
</span><span class='line'>      <span class="vi">@view_handle</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="no">UIColor</span><span class="o">.</span><span class="n">yellowColor</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@color_index</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@color_index</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Rake</h4>

<p>Run <code>$ rake</code> to compile and execute the app.</p>

<p>Note the surprise when you hit the Reset button in the app. This
surprise is one reason why you should always have a designer on your
dev team!</p>

<h4>Conclusion</h4>

<p>The more familiar I become with RubyMotion, the more I learn that there
are multiple ways to do things, especially when it comes to UI. If you
have ideas or suggestions for a different approach, feel free to dash
me a message through the <a href="http://RayHightower.com/contact">Contact Form</a>. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clear Innovation]]></title>
    <link href="http://RayHightower.com/blog/2012/10/06/clear-innovation/"/>
    <updated>2012-10-06T22:47:00-05:00</updated>
    <id>http://RayHightower.com/blog/2012/10/06/clear-innovation</id>
    <content type="html"><![CDATA[<p>Some organizations are innovative, while others are just lucky. How can you tell the difference? I would submit that longevity is a great divider between true innovators and those who are just lucky. An organization that generates new ideas time after time breaks the statistical rules that define luck. These are the organizations worthy of study.</p>

<!-- more -->


<h4>150+ Years of Innovation</h4>

<p>Corning entered the glass business over 150 years ago. At that time, the art of glassmaking had remained largely unchanged since the time of the Roman Empire. Glassmaking was a craft, an art handed down from father to son for generations, and glassmaking techniques were closely guarded secrets.</p>

<p>Corning changed that. Corning introduced science to glassmaking. Over the past century and a half they have experimented extensively and documented thoroughly. The results are glass innovations we see today, such as:</p>

<ul>
<li>Fiber optic cables that shuttle gigabits of data throughout today’s Internet.</li>
<li>Large, flat-panel computer displays that use less power than older monitors while reducing eye-strain.</li>
</ul>


<p>To explore innovation at Corning, we’ll take a closer look at a few Corning innovations from the 1800s and 1900s that are still in use today: stones in the glass, the ribbon machine, and joint ventures.</p>

<h4>Stones in the Glass</h4>

<p>Glassmakers melt silicon and pour (or blow) it into molds to create useful shapes. That’s an oversimplification, but it serves the purposes of this article. Glass melts at very high temperatures. One big challenge faced by any glassmaker: building a furnace that won’t melt. If the heat of the molten glass melts the furnace, the product and furnace are both destroyed.</p>

<p>In the early 1900s Corning searched aggressively for a high-temperature furnace material. Researchers believed that new and interesting glass products could be discovered at higher temperatures.</p>

<p>One day, after a fresh batch of glass had cooled, the Corning researchers noticed something disturbing: stones in the glass. Somehow, impurities had crept into the molten glass and when the glass hardened, the impurities were trapped inside.</p>

<h4>Problem or Opportunity?</h4>

<p>The stones in the glass appeared to be a problem until the researchers thought about things from a different perspective. The stones were intact. Whatever the “stones” were made of, they were resilient enough to remain intact while the glass was melted. If the researchers could isolate this material, they might be able to use it to build high-temperature furnaces. The researchers managed to isolate the newly discovered material, and it served as a lining for Corning’s furnaces for many decades after that. Pyrex, the glass that chemists take for granted today, was born in the new high-temperature furnaces.</p>

<h4>General Electric Needed Bulbs</h4>

<p>Thomas Edison’s General Electric Company was an early customer of Corning. Edison needed an enclosure for his new electric lights. Glass seemed to fit the bill.</p>

<p>At the time, glass bulbs for Edison’s new lights were blown by hand. This presented a problem as the demand for light bulbs increased because Corning couldn’t find enough human glass blowers to blow the bulbs fast enough. Further, when humans create simple, specialized products there are always slight variations in quality and dimensions that may render the product unusable.</p>

<p>So the Corning engineers had a new problem to solve. How could they make bulbs faster and with the right dimensions every time?</p>

<h4>Making Light Bulbs</h4>

<p>The Corning engineers first attacked the problem by studying how the glass blowers blew the bulbs. Then they tried to duplicate the human process with machines. The result: Failure.</p>

<h4>Birds vs. Airplanes</h4>

<p>Early airplane designers experienced the same kind of failure when they first tried to fly. They tried to mimic the wings and flapping motion of birds, and the result was failure.</p>

<p>However, the Wright brothers achieved flight because they looked at the problem from a different perspective. Keep the wings still, and move the air with an engine. Birds don’t fly that way. But today, that’s the way that millions of people fly around the world every day. Airplanes don’t mimic birds. They take a different approach, and they fly higher and faster as a result.</p>

<h4>The Ribbon Machine</h4>

<p>Back to making light bulbs. The engineers took a new approach. They threw out everything they knew about light bulb craftsmanship, and they started from scratch. The result was the ribbon machine, a device capable of producing bulbs at the rate of over fifty thousand units per hour. The ribbon machine was Corning’s key machine for making light bulbs for over six decades.</p>

<h4>Human Skills Needed</h4>

<p>Didn’t the ribbon machine put glassblowers out of work? Actually, no. Glassblowers were given other tasks that required special human skills. Through most of the innovations in glass technology, Corning maintained good relationships with the craftsmen and artists who fashioned the glass. Skilled workers in other industries rebelled against innovation because they feared losing their jobs to new machines. Corning’s artisans embraced the new technology because the company had other more advanced tasks for them to perform within the company. The more mundane tasks were relegated to machines.</p>

<h4>Joint Ventures</h4>

<p>Corning competes with glass companies many times its size. The company’s strength lies in its ability to create intellectual property and to profit from it. Other companies recognize this strength and they readily partner with Corning in joint ventures. Dow-Corning and Owens-Corning are two examples. The Corning company figured out how to establish and maintain positive relationships with other companies long before the term “joint venture” was coined.</p>

<p>One reason for Corning’s attractiveness as an innovation partner is their stubborn insistence on investing in research and development, regardless of economic outlook. Many companies look at R&amp;D as something to cut when times get tough. But for Corning, investing in R&amp;D is part of their DNA. As a result, Corning always has something to offer when other firms come looking for a JV partner.</p>

<h4>Conclusion</h4>

<p>The Corning story is remarkable not only because of their recent innovations (fiber optics, LCD panels). Corning has consistently functioned as an innovation factory through two world wars and multiple CEOs. The light bulb, telephone, radio, television, airplane, and computer have all received a boost from Corning’s innovation engine. Corning consistently plays a role in the history of this country and the world. What a powerful source of inspiration.</p>

<h4>Suggested Reading</h4>

<p><em>Corning and the Craft of Innovation</em>, by Margaret B. W. Graham and Alec Shuldiner.</p>

<p><em>Note: A version of this post was originally published at <a href="http://wisdomgroup.com">WisdomGroup.com</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Theodore Roosevelt's Arena]]></title>
    <link href="http://RayHightower.com/blog/2012/09/15/theodore-roosevelt-and-the-arena/"/>
    <updated>2012-09-15T08:46:00-05:00</updated>
    <id>http://RayHightower.com/blog/2012/09/15/theodore-roosevelt-and-the-arena</id>
    <content type="html"><![CDATA[<p>This is one of my favorite quotes from TR. Pardon the bias toward the
male gender. This was written in the early 1900s.</p>

<blockquote>
<p>It is not the critic who counts, not the man who points out how the
strong man stumbled or where the doer of deeds could have done
better.</p>
<p>The credit belongs to the man who is actually in the arena; whose face
is marred by dust and sweat and blood; who strives valiantly; who errs
and comes short again and again; who knows the great enthusiasms, the
great devotions, and spends himself in a worthy cause; who, at the best,
knows in the end the triumph of high achievement; and who, at the worst,
if he fails, at least fails while daring greatly, so that his place
shall never be with those cold and timid souls who know neither victory
nor defeat.</p>
~Theodore Roosevelt
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10,000 Hours of Practice]]></title>
    <link href="http://RayHightower.com/blog/2012/09/03/10000-hours-of-practice/"/>
    <updated>2012-09-03T00:46:00-05:00</updated>
    <id>http://RayHightower.com/blog/2012/09/03/10000-hours-of-practice</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/outliers.jpg" width="200" height="302" align="right" alt="Outliers by Malcolm Gladwell" title="Outliers by Malcolm Gladwell">
In the book <em>Outliers</em>, author Malcolm Gladwell observes that it takes roughly ten thousand hours of practice to achieve mastery in a field. How does Gladwell arrive at this conclusion? And, if the conclusion is true, how can we leverage this idea to achieve greatness in our professions?</p>

<p>Gladwell studied the lives of extremely successful people to find out how they achieved success. This article will review a few examples from Gladwell’s research, and conclude with some thoughts for moving forward.</p>

<!-- more -->


<h4>Violins in Berlin</h4>

<p>In the early 1990s a team of psychologists in Berlin, Germany studied violin students. Specifically, they studied their practice habits in childhood, adolescence, and adulthood. All of the subjects were asked this question: “Over the course of your entire career, ever since you first picked up the violin, how many hours have you practiced?”</p>

<p>All of the violinists had begun playing at roughly five years of age with similar practice times. However, at age eight, practice times began to diverge. By age twenty, the elite performers averaged more than 10,000 hours of practice each, while the less able performers had only 4,000 hours of practice.</p>

<p>The elite had more than double the practice hours of the less capable performers.</p>

<h4>Natural Talent: Not Important</h4>

<p>One fascinating point of the study: No “naturally gifted” performers emerged. If natural talent had played a role, we would expect some of the “naturals” to float to the top of the elite level with fewer practice hours than everyone else. But the data showed otherwise. The psychologists found a direct statistical relationship between hours of practice and achievement. No shortcuts. No naturals.</p>

<h4>Sneaking Out to Write Code</h4>

<p>You already know how Microsoft was founded. Bill Gates and Paul Allen dropped out of college to form the company in 1975. It’s that simple: Drop out of college, start a company, and become a billionaire, right? Wrong.</p>

<p>Further study reveals that Gates and Allen had thousands of hours of programming practice prior to founding Microsoft. First, the two co-founders met at Lakeside, an elite private school in the Seattle area. The school raised three thousand dollars to purchase a computer terminal for the school’s computer club in 1968.</p>

<p>A computer terminal at a <em>university</em> was rare in 1968. Gates had access to a terminal in <em>eighth grade</em>. Gates and Allen quickly became addicted to programming.</p>

<p>The Gates family lived near the University of Washington. As a teenager, Gates fed his programming addiction by sneaking out of his parents’ home after bedtime to use the University’s computer. Gates &amp; Allen acquired their10,000 hours through this and other clever teenage schemes. When the time came to launch Microsoft in 1975, the two were ready.</p>

<h4>Practice Makes Improvement</h4>

<p>In 1960, while they were still an unknown high school rock band, the Beatles went to Hamburg, Germany to play in the local clubs.</p>

<p>The group was underpaid. The acoustics were terrible. The audiences were unappreciative. So what did the Beatles get out of the Hamburg experience? Hours of playing time. Non-stop hours of playing time that forced them to get better.</p>

<p>As the Beatles grew in skill, audiences demanded more performances - more playing time. By 1962 they were playing eight hours per night, seven nights per week. By 1964, the year they burst on the international scene, the Beatles had played over 1,200 concerts together. By way of comparison, most bands today don’t play 1,200 times in their <em>entire career</em>.</p>

<h4>Falling in Love With Practice</h4>

<p>The elite don’t just work harder than everybody else. At some point the elites fall in love with practice to the point where they want to do little else.</p>

<p>The elite software developer is the programmer who spends all day pounding code at work, and after leaving work she writes open source software on her own time.</p>

<p>The elite football player is the guy who spends all day on the practice field with his teammates, and after practice he goes home to watch game films.</p>

<p>The elite physician listens to medical podcasts in the car during a long commute.</p>

<p>The elites are in love with what they do, and at some point it no longer feels like work.</p>

<h4>What’s Next?</h4>

<p>Now that we’ve reviewed the trends uncovered by Gladwell’s research, what can we do about it? All of us want to be great at something. Now that we know how other achievers have gotten there, what can we do to join their ranks?</p>

<p>One approach: We could choose a field and practice for 10,000 hours. If we are currently working in our target profession, forty hours per week over five years would give us ten thousand hours.</p>

<p>Or&#8230; We can look at the question in reverse. Where have we already logged 10,000 hours of practice? What is it that we do really well? What tasks do we perform so well that people ask: How did you do that? Sometimes when we fall in love with practice we don’t even recognize it!</p>

<p>If you’re running a company, what does your company do better than anybody else? What is it that the individual members of your company do better than anybody? How do you create an environment that gives everyone on your team the opportunity to practice?</p>

<h4>Conclusion</h4>

<p>Business is tough, especially now. Yet even in the midst of a challenging economy, there are individuals and companies that prosper beyond all expectations. Practice plays a major role in success.</p>

<h4>Suggested Reading</h4>

<p><em>Outliers</em>, by Malcolm Gladwell. Through interviews and statistical analysis, Gladwell determines why some people and organizations achieve success far beyond their peers.</p>

<p><em>Note: A version of this post was originally published at <a href="http://wisdomgroup.com">WisdomGroup.com</a>.</em></p>
]]></content>
  </entry>
  
</feed>
