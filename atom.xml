<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RayHightower.com]]></title>
  <link href="http://RayHightower.com/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2013-05-14T06:28:03-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion Sketch Notes]]></title>
    <link href="http://RayHightower.com/blog/2013/05/13/rubymotion-sketch-notes/"/>
    <updated>2013-05-13T17:48:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/05/13/rubymotion-sketch-notes</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/rubymotion-sketchnotes.jpg" width="600" height="313"
alt="RubyMotion Sketchnotes" title="RubyMotion Sketchnotes"
align="center"></p>

<!--more-->


<p>Alexis Finch (<a href="https://twitter.com/agentFin">@agentfin</a>) created Sketch Notes for a <a href="http://rayhightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> presentation that I gave for <a href="http://meetup.com/geekfest">Groupon&#8217;s Geekfest</a>.</p>

<p>Alexis is remarkable. It&#8217;s challenging enough to capture text notes during a presentation. But Alexis managed to turn the talk into meaningful graphics in real time. Something amazing is happening between the ears of Alexis!</p>

<p>Sketchnotes were invented by Mike Rohde (<a href="http://twitter.com/rohdesign">@rohdesign</a>). Mike has published videos and a book describing the <a href="http://rohdesign.com/sketchnotes/">process of creating Sketchnotes</a>.</p>

<p>Thank you Alexis and Mike for sharing your artistic insights, and thank you Groupon for having me at Geekfest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Man Who Sold Hot Dogs]]></title>
    <link href="http://RayHightower.com/blog/2013/04/23/the-man-who-sold-hot-dogs/"/>
    <updated>2013-04-23T18:13:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/04/23/the-man-who-sold-hot-dogs</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/hot-dog-cart.jpg" width="250" height="277" align="right" title="The Man Who Sold Hot Dogs" alt="The Man Who Sold Hot Dogs">
<em>Note: This timeless story pre-dates the web, and it has appeared at <a href="http://wisdomgroup.com">WisdomGroup.com</a>. Author unknown.</em></p>

<p>There was a man who lived by the side of the road and sold hot dogs. He was hard of hearing, so he had no radio. He had trouble with his eyes, so he read no newspaper. But he sold good hot dogs. He put signs up on the highway telling how good they were. He stood on the side of the road and cried &#8220;Buy a hot dog, mister?&#8221; And people bought. He increased his meat and bun orders. He bought a bigger stove to take care of his trade.</p>

<p>One day, his son came home from college to help him out. <!--more--> The son said, &#8220;Father, haven’t you been listening to the radio? Haven’t you been reading the newspaper? There’s a big recession. The European situation is terrible. The domestic situation is worse.&#8221;</p>

<p>Whereupon the father thought, &#8220;Well, my son has been to college. He reads the papers and listens to the radio. He ought to know.&#8221;</p>

<p>So the father cut down on his meat and bun orders, took down his advertising signs, and no longer bothered to stand out on the highway to sell his hot dogs.</p>

<p>Hot dog sales fell almost overnight.</p>

<p>&#8220;You’re right, son,&#8221; the father said. &#8220;We are certainly in the middle of a great recession.&#8221;</p>

<h4>Epilogue</h4>

<p>Whether times are good or bad, all of us must ask ourselves: What role is played by self-fulfilling prophesy?</p>

<p>Luck is what happens when preparation meets opportunity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ack 2.0: Written in Perl, Useful With Ruby]]></title>
    <link href="http://RayHightower.com/blog/2013/04/20/ack-written-in-perl-useful-with-ruby/"/>
    <updated>2013-04-20T17:12:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/04/20/ack-written-in-perl-useful-with-ruby</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/ack.png" align="right" height="237" width="230" alt="Ack Linux Mac OS X" title="Ack Linux Mac OS X"></p>

<p><a href="http://beyondgrep.com/">Ack</a> is an open source command line tool that lets developers search large trees of source code very quickly. If you are looking for a method definition in a haystack of files, Ack will find that needle for you. Many devs regard Ack as a replacement for <a href="http://en.wikipedia.org/wiki/Grep">grep</a>.</p>

<p>The Elmhurst <a href="http://chicagoruby.org">ChicagoRuby</a> meetings are always a source of unexpected learning. Today ChicagoRuby welcomed <a href="http://twitter.com/petdance">Andy Lester</a>, creator of Ack. Andy released Ack 2.0 two days ago. He shared some of the latest features in an impromptu demo.</p>

<!--more-->


<h4>Why Ack?</h4>

<p>Have you ever been working on a project, only to be interrupted when you need to look for something? It could be a method name, a variable declaration, or a string of text in a comment. A minor distraction costs you the time it takes to search plus the time required to re-focus.</p>

<p>All of us are more productive when we stay <em>in the zone</em>. Ack helps devs to maintain focus and thereby produce better results.</p>

<h4>First, Install Perl</h4>

<p>Ack requires the <a href="http://en.wikipedia.org/wiki/Perl">Perl</a> programming language. Perl comes pre-installed on Mac OS X and most Linux distros. If you&#8217;re running on a &#8216;nix platform, you probably have Perl already.</p>

<p>Windows installations are beyond the scope of this article. If you&#8217;re running Windows, you might consider a Linux VM for Ruby and Rails-related work.</p>

<h4>Installing Ack on Mac OS X</h4>

<p>Installing Ack is so easy that it almost feels wrong: Grab Ack in a single Perl file and drop it in your <code>~/bin/</code> directory. That&#8217;s it.</p>

<p>Ack can also be installed via <a href="http://mxcl.github.io/homebrew/">Homebrew</a>, but I prefer the <em>drop it in ~/bin</em> installation since everything is contained in one file. Here&#8217;s a more detailed version of the steps:</p>

<ol>
<li>If you don&#8217;t have one already, create <code>~/bin/</code> as a subdirectory of your home directory.</li>
<li>Grab a the single-file copy of Ack from <a href="http://beyondgrep.com/">http://beyondgrep.com/ </a></li>
<li>Drop the single-file copy of Ack into a file called <code>~/bin/ack</code></li>
<li>Make sure that <code>$HOME/bin:</code> appears at the beginning of your <code>$PATH</code> environment variable.</li>
</ol>


<p>At this point you should be running Ack v2.0 or later. To verify:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/bin<span class="nv">$ </span>ack --version
</span><span class='line'>ack 2.02 <span class="o">(</span>git commit f3c8827<span class="o">)</span>
</span><span class='line'>Running under Perl 5.12.4 at /usr/bin/perl
</span><span class='line'>
</span><span class='line'>Copyright 2005-2013 Andy Lester.
</span><span class='line'>
</span><span class='line'>This program is free software.  You may modify or distribute it
</span><span class='line'>under the terms of the Artistic License v2.0.
</span><span class='line'>
</span><span class='line'>~/bin<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Installation complete. Now, let&#8217;s take Ack for a spin.</p>

<h4>Using Ack at the Command Line</h4>

<p>For a sample project, let&#8217;s use <code>demo_app</code> from Michael Hartl&#8217;s <a href="http://rubyonrailstutorial.com">Ruby on
Rails Tutorial</a>. Imagine that you want
to find every file in the project that references <code>user_id</code>. How would
you do that?
<img src="http://RayHightower.com/images/ack_user_id.png" align="center" height="650" width="887" alt="Ack command line demo" title="Ack command line demo"></p>

<p>Fast, clear, and highlighted in color. Bonus: If you&#8217;re a Vim user,
try <a href="https://github.com/mileszs/ack.vim">ack.vim</a> if you want to run Ack
without leaving your editor.</p>

<h4>The Bottom Line</h4>

<p>Ack helps devs to find things quicker without leaving the zone. Try it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New RVM Behavior With .ruby-version and .ruby-gemset]]></title>
    <link href="http://RayHightower.com/blog/2013/04/18/new-rvm-behavior-ruby-version-ruby-gemset/"/>
    <updated>2013-04-18T20:33:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/04/18/new-rvm-behavior-ruby-version-ruby-gemset</id>
    <content type="html"><![CDATA[<p><a href="http://RayHightower.com/blog/2013/04/18/new-rvm-behavior-ruby-version-ruby-gemset/"><img src="http://RayHightower.com/images/rvm.png" height="98" width="89" align="right" alt="RVM .ruby-version .ruby-gemset" title="RVM .ruby-version .ruby-gemset"></a>
I trust <a href="http://rvm.io">RVM</a> to manage my Ruby versions and my gemsets. So when I saw an unexpected change in RVM&#8217;s behavior, I was concerned about a possible disruption in my workflow.</p>

<!--more-->


<h4>A New RVM Message</h4>

<p>Here&#8217;s the message I received when I changed into <code>mydirectory/</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/apps/<span class="nv">$ </span><span class="nb">cd </span>mydirectory/
</span><span class='line'>You are using <span class="s1">&#39;.rvmrc&#39;</span>, it requires trusting, it is slower and it is not
</span><span class='line'>compatible with other ruby managers, you can switch to <span class="s1">&#39;.ruby-version&#39;</span>
</span><span class='line'>using <span class="s1">&#39;rvm rvmrc to [.]ruby-version&#39;</span> or ignore this warnings with
</span><span class='line'><span class="s1">&#39;rvm rvmrc warning ignore ~/Code/Ruby/apps/mydirectory/.rvmrc&#39;</span>,
</span><span class='line'><span class="s1">&#39;.rvmrc&#39;</span> will <span class="k">continue </span>to be the default project file in RVM 1 and RVM 2,
</span><span class='line'>to ignore the warning <span class="k">for </span>all files run
</span><span class='line'><span class="s1">&#39;rvm rvmrc warning ignore all .rvmrcs&#39;</span>.
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/mydirectory<span class="o">[</span>master<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Decision: Do the Update</h4>

<p>Ignoring a warning feels like sticking my head in the sand. It&#8217;s better to face things head-on. So I decided to go with the update. If things don&#8217;t work out, I can always remove RVM completely and start from scratch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/apps/mydirectory<span class="o">[</span>master<span class="o">]</span><span class="nv">$ </span>rvm rvmrc to .ruby-version
</span></code></pre></td></tr></table></div></figure>


<p>My shell responded by repeating the <code>.rvmrc</code> vs <code>.ruby-version</code> notice. But when I examine the directory, everything looks good.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>total 56
</span><span class='line'>drwx---rwx   53 rth  wheel   1802 Apr 19 07:18 .
</span><span class='line'>drwx---rwx   27 rth  wheel    918 Feb 10 08:26 ..
</span><span class='line'>-rw-r--r--    1 rth  wheel    175 Feb  4 13:41 .gitignore
</span><span class='line'>-rw-r--r--@   1 rth  wheel      0 Oct 15  2012 .repl_history
</span><span class='line'>-rw-r--r--    1 rth  wheel     11 Apr 19 07:18 .ruby-gemset
</span><span class='line'>-rw-r--r--    1 rth  wheel     16 Apr 19 07:18 .ruby-version
</span><span class='line'>drwxr-xr-x   10 rth  wheel    340 Feb 14 20:41 AFNetworking-RubyMotion-Example
</span><span class='line'>drwxr-xr-x   13 rth  wheel    442 Feb 24 17:29 AccordionUIView
</span></code></pre></td></tr></table></div></figure>


<p>Instead of a single <code>.rvmrc</code> file, Ruby versions are managed by
<code>.ruby-version</code> while gemsets are managed through <code>.ruby-gemset</code>.</p>

<h4>Bash Alias</h4>

<p>Next, it&#8217;s time to clean things up by adding an <code>alias</code> to
<code>~/.bash_profile</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">newrvm</span><span class="o">=</span><span class="s2">&quot;rvm rvmrc to .ruby-version&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tell the terminal session to use the new <code>~/.bash_profile</code> with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>And now we can begin using <code>.ruby-version</code> and <code>.ruby-gemset</code> in any .rvmrc-equipped directory with a simple one-word command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>newrvm
</span></code></pre></td></tr></table></div></figure>


<h4>Feedback Welcome</h4>

<p>If you notice any snags (including typos) in the above procedure, please reach out via the comments below or through <a href="http://twitter.com/rayhightower">Twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elegant Code]]></title>
    <link href="http://RayHightower.com/blog/2013/04/12/elegant-code/"/>
    <updated>2013-04-12T13:34:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/04/12/elegant-code</id>
    <content type="html"><![CDATA[<p>This quote is too long to tweet, but too good to pass up:</p>

<blockquote><p>Ugly programs are like ugly suspension bridges: they&#8217;re much more liable to collapse than pretty ones, because the way humans (especially engineer-humans) perceive beauty is intimately related to our ability to process and understand complexity. A language that makes it hard to write elegant code makes it hard to write good code.</p>

<p>~Eric S. Raymond, Author of The Cathedral and the Bazaar</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenges Make Us Stronger]]></title>
    <link href="http://RayHightower.com/blog/2013/03/25/challenges-make-us-stronger/"/>
    <updated>2013-03-25T09:37:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/03/25/challenges-make-us-stronger</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/moth.png" width="300" height="215" align="right" title="Emperor moth photo by Dean Morley" alt="Emperor moth photo by Dean Morley">
A man found a cocoon of an emperor moth. He took it home so that he could watch the moth come out of the cocoon. On the day a small opening appeared, he sat and watched the moth for several hours as the moth struggled to force its body through that little hole.</p>

<p>Then it seemed to stop making any progress. It appeared as if it had gotten as far as it could and it could go no farther. It just seemed to be stuck.</p>

<!--more-->


<h4>Kindness</h4>

<p>Then the man, in his kindness, decided to help the moth, so he took a pair of scissors and snipped off the remaining bit of the cocoon. The moth then emerged easily. But it had a swollen body and small, shriveled wings. The man continued to watch the moth because he expected that, at any moment, the wings would enlarge and expand to be able to support the body, which would contract in time. Neither happened! In fact, the little moth spent the rest of its life crawling around with a swollen body and shriveled body and shriveled wings. It never was able to fly.</p>

<h4>Helping vs. Understanding</h4>

<p>What the man in his kindness and haste did not understand was that the restricting cocoon and the struggle required for the moth to get through the tiny opening was the way of forcing fluid from the body of the moth into its wings so that it would be ready for flight once it achieved its freedom from the cocoon. Freedom and flight would only come after the struggle. By depriving the moth of a struggle, he deprived the moth of health.</p>

<h4>Obstacles and Growth</h4>

<p>Sometimes struggles are exactly what we need in our life. If we were to go through our life without any obstacles, we would be crippled. We would not be as strong as what we could have been. Give every opportunity a chance, and leave no room for regrets.</p>

<p><em>The author of this article is unknown. Emperor moth photo by <a href="http://www.flickr.com/photos/33465428@N02/7015602897/">Dean Morley</a></em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Take a Raspberry Pi Screenshot]]></title>
    <link href="http://RayHightower.com/blog/2013/03/19/how-to-take-a-raspberry-pi-screenshot/"/>
    <updated>2013-03-19T20:43:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/03/19/how-to-take-a-raspberry-pi-screenshot</id>
    <content type="html"><![CDATA[<p>After you get a <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a> up and running, you may want to take a few screenshots so you can share the experience with others. Here&#8217;s how.</p>

<!--more-->


<h4>Install Scrot</h4>

<p>First, install the screenshot utility, <code>scrot</code>. Open up the LXTerminal
and type the following at the prompt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install scrot
</span></code></pre></td></tr></table></div></figure>


<h4>Use Scrot</h4>

<p>To take a screenshot of the whole screen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo scrot
</span></code></pre></td></tr></table></div></figure>


<p>By default, the screenshot will be stored in the current directory in a file named for the numerical date and time with a <code>.png</code> extension.</p>

<p>To take a screenshot after a 10-second delay:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo scrot -d10
</span></code></pre></td></tr></table></div></figure>


<h4>Learn More About Scrot</h4>

<p>To display a list of Scrot commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo scrot -h
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Can Do It Now]]></title>
    <link href="http://RayHightower.com/blog/2013/03/13/you-can-do-it-now/"/>
    <updated>2013-03-13T15:31:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/03/13/you-can-do-it-now</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/do_it_now.jpg" align="right" width="200" height="296" alt="You Can Do It Now" title="You Can Do It Now">
If you are fortunate enough to work in the technology industry, you do not need permission to move forward. So do it now.</p>

<p>Yes, you will have to define <em>it</em> for yourself.</p>

<h4>ChiPMA – Product Management</h4>

<p>A few years ago I had the pleasure of hearing <a href="http://www.youtube.com/watch?v=igsvMAU5POY">Suneel Gupta</a> speak at a Chicago Product Management Association meeting hosted by Pathfinder Development. Three points raised during Gupta’s talk:</p>

<ul>
<li>Conditions are never perfect. So start now.</li>
<li>What does <em>start</em> mean? Figure that out, and draw out the plan.</li>
<li>If you suck at first, keep going.</li>
<li>Conditions are never perfect.</li>
</ul>


<!-- more -->


<h4>Learning From History</h4>

<p>Gupta is a student of history. He began the talk by drawing parallels between today’s startup culture and the early days of powered flight.</p>

<p>In the late 1800s, Samuel Pierpont Langley was an accomplished engineer with great connections to money and resources. One of his lifelong goals was to develop a vehicle for powered flight. He built several successful models, hired the smartest collaborators he could find, and he even raised $50k (in 1898 dollars) from investors. Newspaper reporters followed his entourage as they conducted experiments. Surely, this team of thoroughbreds would solve the flight puzzle.</p>

<p>But most people have never heard of Langley. Somewhere in Ohio, far from the news outlets of the day, the Wright Brothers achieved the goal first. When Langley heard the news, he stopped trying.</p>

<p>Why did the Wright Brothers win? They never waited for perfect conditions. The Wright Brothers did what they could with the resources they had at the time. Maybe constraints are advantages in disguise.</p>

<h4>Draw Out the Plan</h4>

<p>Everybody has dreams. Something magical happens when we take the time to map out our dreams on paper.</p>

<p>Gupta’s example: Jack Dorsey, creator of Twitter. Dorsey drew the first mock-up for Twitter on paper. And then he showed it to people. Some laughed. Many gave feedback. He used the feedback to hone the idea into a viable product.</p>

<p>Until you put the idea on paper (or some other medium) so you can show it to potential customers and collaborators, you’ll never get the feedback you need to improve.</p>

<h4>Keep Going</h4>

<p>Gupta and his brother had an idea. They wanted to create videos about the first wave of Indians to move to America. They approached Hollywood experts about creating the videos.</p>

<p>&#8220;You’ll need at least $1 million,&#8221; they were told. Much too expensive. Most people fold when facing a million dollar wall.</p>

<p>But Suneel and his brother made their own videos with the equipment they had available. The videos were not million-dollar productions. But here’s the upside: When they were done, they had something of substance that they could show to people. They posted their work at <a href="http://kahanimovement.com">KahaniMovement.com</a>. One viewer liked the site enough to send a link to Steven Spielberg.</p>

<p>Spielberg viewed the videos and he gave the brothers clear, actionable feedback. They made improvements. And they learned something interesting about Spielberg in the process: Even Spielberg starts with a loose cut sometimes! When Spielberg has a fresh idea that he’s trying to communicate, he will grab a hand-held camera, shoot the idea (no matter how rough) and show it to his team. If a picture is a thousand words, then a video is… you get the idea.</p>

<h4>Teachers &amp; Parents Ignite Our Passion</h4>

<p>Gupta shared a story about his 7th grade social studies class. The class watched a film of JFK delivering his inaugural speech in 1960. Gupta was moved. At the end of the film, the teacher informed that class that JFK had not written the speech. The author was Ted Sorensen, a man whom Kennedy called his <em>intellectual blood bank</em>.</p>

<p>In 7th grade, Gupta had found his calling. He would become a speech writer.</p>

<p>He went home and told his mother about his decision to become a speech writer. And that’s when his mother gave him a powerful piece of advice: &#8220;If you want to do that, you don’t have to wait. You can do it now.&#8221;</p>

<p>You can do it now. What are you waiting for?</p>

<p><em>A version of this article was originally posted at <a href="http://wisdomgroup.com">http://wisdomgroup.com</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technology and God]]></title>
    <link href="http://RayHightower.com/blog/2013/03/03/technology-and-god/"/>
    <updated>2013-03-03T14:00:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/03/03/technology-and-god</id>
    <content type="html"><![CDATA[<p>Reflecting on a quote I became aware of recently:</p>

<blockquote><p>Technology is a gift of God. After the gift of life it is perhaps the greatest of God&#8217;s gifts. It is the mother of civilizations, of arts and of sciences.</p>

<p>~Freeman Dyson, English Physicist</p></blockquote>

<p>Well said, Freeman Dyson. Praise God for technology.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Programming: The Big Nerd Ranch Guide]]></title>
    <link href="http://RayHightower.com/blog/2013/02/28/objective-c-programming-the-big-nerd-ranch-guide/"/>
    <updated>2013-02-28T15:52:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/28/objective-c-programming-the-big-nerd-ranch-guide</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/objective-c-big-nerd.png" align="right" width="250" height="357" alt="Objective-C Programming - The Big Nerd Ranch Guide" title="Objective-C Programming - The Big Nerd Ranch Guide"></p>

<blockquote><p>You will be baffled from time to time… Stick with this book. I promise the bewilderment will cease before you get to the final page.<br/>~ Aaron Hillegass, Author</p></blockquote>

<h4>Finding the Right Objective-C Book</h4>

<p>I&#8217;ve gone through several Objective-C books in my quest to master <a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>. You read that right: I&#8217;m learning Objective-C so that I can master RubyMotion. <em>Objective-C Programming: The Big Nerd Ranch Guide</em> is one book that clicks for me. Here&#8217;s why.</p>

<!-- more -->


<ul>
<li><p>Minimal fluff. Other Objective-C books start off with speeches about why a dev should write for iOS. What a waste of paper. The Big Nerd approach: Start with a few paragraphs about C, and then jump right in to Xcode installation followed by &#8220;Hello World.&#8221; Refreshingly direct.</p></li>
<li><p>Clear examples. As I immerse myself deeper into the world of Objective-C, I am troubled by much of the documentation. It&#8217;s okay to describe a method signature, but a description with an example is much better. While reading other Objective-C books, I found myself pausing to search Stack Overflow for alternate explanations. The Big Nerd book is better because everything is self-contained. Method descriptions are followed by clear examples.</p></li>
<li><p>Zero Assumptions. Even though the book contains minimal fluff, readers will appreciate how the author defines terms throughout the text. For example, the book does not assume that the reader knows the classroom definition of the word <em>syntax</em>. It defines the word explicitly:</p></li>
</ul>


<blockquote><p>Syntax is the set of rules that governs how your code must be written in a given programming language. These rules are extremely specific, and if you fail to follow them, your program won&#8217;t work.</p></blockquote>

<p>Clearly put!</p>

<h4>Do I Really Need Objective-C?</h4>

<p>Yes. If you want to be effective with RubyMotion, you must grow strong with Objective-C.</p>

<p>The RubyMotion devs whom I admire most also know Objective-C. Devs like Matt Aimonetti (creator of BubbleWrap), Randall Thomas and Tammer Saleh (authors of <em>RubyMotion in the Cloud</em>), Jonathan Penn (instructor/speaker at CocoaConf) and Laurent Sansonetti (creator of RubyMotion) move seamlessly between the worlds of Ruby and Objective-C. Luke became a Jedi because he followed in the footsteps of Yoda.</p>

<p>More important than following the masters: Learning from their triumphs and mistakes by reading their code. Developers in 2013 are fortunate to have tools like GitHub where code is shared on a massive scale. Most iOS code is written in Objective-C. If we want to learn from the iOS code that has been written before, we need to know Objective-C.</p>

<h4>Highly Recommended</h4>

<p>If you want to develop apps for iOS devices, start with <em>Objective-C Programming: The Big Nerd Ranch Guide</em>. The book is also helpful if you prefer RubyMotion over Objective-C.</p>

<p>And don&#8217;t forget your <a href="http://RayHightower.com/blog/2012/09/03/10000-hours-of-practice/">10,000 Hours of Practice</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atari's Pong, Built With RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2013/02/26/atari-pong-rubymotion-objective-c/"/>
    <updated>2013-02-26T10:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/26/atari-pong-rubymotion-objective-c</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/pong-rubymotion-objective-c.png" width="300" height="160" alt="Atari's Pong in RubyMotion and Objective-C" title="Atari's Pong in RubyMotion and Objective-C" align="right">
<a href="http://en.wikipedia.org/wiki/Pong">Atari&#8217;s Pong</a> is a classic video arcade game from the 1970s. Seeing Pong always gives me childhood flashbacks.</p>

<h4>Pong in Objective-C</h4>

<p>I recently completed the <a href="http://mobilemakers.co/ios-accelerated">iOS Accelerated</a> course at the <a href="http://mobilemakers.co/">Mobile Makers Academy</a>. For one of our homework assignments, we were asked to build a version of Pong that runs on iOS. Our instructor, <a href="http://twitter.com/dbora">Don Bora</a>, started us off with some skeleton code in Objective-C. Each student had to take Don&#8217;s code and:</p>

<ul>
<li>Add paddles.</li>
<li>Make the paddles move on their own.</li>
<li>Make the ball bounce off the moving paddles.</li>
<li>Keep score.</li>
<li>Let one or two players control the paddles via touch.</li>
</ul>


<!-- more -->


<h4>Questions to Consider</h4>

<p>How do you determine whether the pixels of the ball have collided with the pixels of a paddle? What about wall collisions? When a collision occurs, where should the ball bounce next? As with any application, there are many details to consider.</p>

<h4>Building Blocks</h4>

<p>Of course, Don had already introduced the necessary skills in earlier lectures, labs, and homework. It was our job to put the pieces together.</p>

<p>Members of the class paired with each other. We shared solutions and advice. In time, we each ended up with a working version of Pong in Objective-C. It&#8217;s exciting to see a favorite childhood game running in the iOS simulator on your own machine, especially if you built the game yourself.</p>

<h4>Pong in RubyMotion</h4>

<p>Since my day job revolves around Ruby, it made sense to re-write the exercise in <a href="http://rayhightower.dev/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>. Here are video clips of my two solutions. The first was written in Objective-C during the Mobile Makers course. The second was written in RubyMotion.</p>

<center><iframe name="pong-oc" width="560" height="315" src="http://www.youtube.com/embed/9LETiMdi9jQ?rel=0" frameborder="0" allowfullscreen></iframe></iframe></center>




<center><iframe name="pong-rm" width="560" height="315" src="http://www.youtube.com/embed/Lt-JKqiA_fg?rel=0" frameborder="0" allowfullscreen></iframe></center>


<p>As expected, the two solutions look similar. Source code is on GitHub:</p>

<ul>
<li><a href="http://github.com/rayhightower/pong-oc">Pong in Objective-C</a></li>
<li><a href="http://github.com/rayhightower/pong-rm">Pong in RubyMotion</a></li>
</ul>


<h4>RubyMotion Gotchas</h4>

<p>I encountered a few RubyMotion snags during development:</p>

<ul>
<li><p><em>Mouseovers Ingored</em>. Normally, when running the simulator with RubyMotion, you can mouse over an object in the simulator, hit the command key, and grab a handle to the object.  This behavior was absent in landcape mode with version 1.31 of RubyMotion. The release notes for version 1.33 mention that the problem has been solved. However, that was not my experience.</p></li>
<li><p><em>Touch Events Ignored on Part of Screen</em>. For some reason, the simulator ignored touch events on the right side of the screen. When I programatically moved the right paddle closer to the left side of the screen, both paddles responded to touch events. Searches of Google and Stack Overflow reveal that others have encounterd the same issue with touch events, especially in landcape mode.</p></li>
</ul>


<p><em>Update (3/13/2013): The issue with touch events has been resolved, thanks to advice from Turki Al-Qusaimi in the comments below. Updated code has been pushed to the <a href="https://github.com/RayHightower/pong-rm">master branch on GitHub</a>.</em></p>

<p>Of course, I introduced a few bugs of my own while developing the Pong game. At one point, the velocity of the ball increased every time a player scored. It made the game exciting! But I didn&#8217;t know the cause of the acceleration, and good developers strive to maintain better control over their projects.</p>

<p>I eventually found the acceleration problem: When using an NSTimer object to control animation, you have to invalidate the timer at the beginning of each cycle, or the animation will accelerate. That&#8217;s a useful thing to know.</p>

<p>The rest of my work in RubyMotion went well, and I continue to enjoy the product. I plan to update the code once the touch event issues have been resolved.</p>

<h4>Why Play Games?</h4>

<p>Why should a serious developer spend time writing games? I can think of a few reasons:</p>

<ul>
<li><p>Writing a game challenges our skills on many levels. In the case of Pong, we have to dust off our old physics and geometry textbooks to ensure that the ball bounces like a real ball.</p></li>
<li><p>Writing a game lets us break out of our constraints. Devs who write business apps are very familiar with constraints.</p></li>
<li><p>Because writing a game is fun.</p></li>
</ul>


<p>Of course, the most important reason was given by a captain of the USS Enterprise NCC-1701:</p>

<blockquote><p>The more advanced the mind, the greater the need for the simplicity of play.
<br/>~James T. Kirk</p></blockquote>

<h4>Room for Improvement</h4>

<p>Building the Pong game was an interesting exercise in testing the capabilities of RubyMotion. Having done the work, I can look back and see some areas where I could improve the results. For example:</p>

<ul>
<li><p>Automated testing. These proof-of-concept exercises were done without automated testing. What is the best way to apply test driven development to a game? RubyMotion comes with a TDD framework, MacBacon. That would be a great subject for a future blog post.</p></li>
<li><p>Better design. Each exercise looks like something from the 1970s! How would Pong function if it was created in 2013?</p></li>
<li><p>Better collision detection. I&#8217;m using a built-in iOS method to detect ball collisions. The built-in detection works fine with the stationary walls, but not as well with the moving paddles. If I write a future version of Pong, I should also write a custom collision detection method.</p></li>
</ul>


<h4>Comments and Pull Requests</h4>

<p><a href="http://wisdomgroup.com">My team and I</a> build business apps. My gaming experience is limited. If you are a game developer, and if you see anything in my code that could be done better, your ideas are welcome. Feel free to submit a <a href="http://github.com/rayhightower/pong-rm">pull request via GitHub</a>, or you can drop a note in the comments below. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprenticeship Patterns]]></title>
    <link href="http://RayHightower.com/blog/2013/02/17/apprenticeship-patterns-by-dave-h-hoover-and-adewale-oshineye/"/>
    <updated>2013-02-17T09:52:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/17/apprenticeship-patterns-by-dave-h-hoover-and-adewale-oshineye</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/apprenticeship-patterns.gif" align="right" width="180" height="236" alt="Apprenticeship Patterns" title="Apprenticeship Patterns"></p>

<blockquote><p><em>In times of drastic change it is the learners who inherit the future. The learned usually find themselves equipped to live in a world that no longer exists.<br/>- Eric Hoffer, Reflections on the Human Condition</em></p></blockquote>

<p>Blogger&#8217;s Note: This review of the book <em>Apprenticeship Patterns</em> by <a href="https://twitter.com/davehoover">Dave H. Hoover</a> and <a href="http://twitter.com/ade_oshineye">Adewale Oshineye</a> was originally posted at <a href="http://www.chicagoruby.org/book-reviews/">ChicagoRuby.org/book-reviews</a>.</p>

<h4>A New Profession</h4>

<p>Software development is among the newest of professions – roughly 70 years old depending on what you consider to be the beginning. The field is in a constant state of flux. New languages, new theories, new ways of communicating with clients… the list seems endless. How does a new developer keep up? How does a seasoned developer avoid growing stale?</p>

<!-- more -->


<h4>How to Excel</h4>

<p>Apprenticeship Patterns was written as a guide for developers who want to excel throughout their careers. You might think of the book as a compilation of design patterns applied to human beings. Yes, the book is suitable for new developers. But seasoned people will find value as well. One useful pattern for veterans: Share What You Learn. All of us see old ideas through fresh glasses when we’re questioned about them. “When one person teaches, two people learn,” says the book.</p>

<p>How did the authors compile the list of patterns? They reflected on their own practices and they asked other developers. They spoke with software professionals at various stages of their careers to find out what steps they took (and continue to take) to keep growing.</p>

<h4>Non-Linear Reading</h4>

<p>The book can be read in a non-linear fashion if you prefer. I would suggest that you start with the Reading List pattern on page 100, followed by Read Constantly on page 111. These two patterns do a great job of framing the rest of the book because the reader will be executing the pattern while reading about it. There’s something meta about starting that way, and meta is cool.</p>

<p>The Reading List pattern inspired me to post my personal reading list on GitHub.</p>

<h4>Steer Your Own Education</h4>

<p>One theme consistently appears throughout the book: If you want to be a great software developer, you must be an active participant in your own education. Formal education might be a good start, but it’s not enough. Formal programs tell you what to read. Formal programs tell what to do in the classroom, and if you’re a good student you do it. But here’s something that we rarely do: While finishing a formal assignment, how many of us stop to consider whether we’ve been assigned the best curriculum for our long term goals?</p>

<p>The professional person must be a continuous student. Patterns give us a good place to start.</p>

<h4>Improvements</h4>

<p>What should the next edition of Apprenticeship Patterns look like? For starters, I would love to read an electronic version… filled with hyperlinks. All of the apprenticeship patterns relate to other patterns, and being able to click to the related patterns would enrich the learning experience. This book would make a great mobile app, especially if you turn all of the references into hyperlinks. What an exciting learning experience it would be!</p>

<p>Now… if only we could find a hand-held reading device that supports hyperlinks, and a couple of software craftsmen to get the job done :-)</p>

<h4>Update After the Original Post</h4>

<p>Ade Oshineye tweeted with good news a few minutes after the original post:</p>

<blockquote><p>@ChicagoRuby: Wish granted: <a href="http://apprenticeship-patterns.labs.oreilly.com/">http://apprenticeship-patterns.labs.oreilly.com/</a>. The book is available online as a hypertext.</p></blockquote>

<p>Thank you authors!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic ctags with RubyMotion and Vim]]></title>
    <link href="http://RayHightower.com/blog/2013/02/12/automatic-ctags-with-rubymotion-and-vim/"/>
    <updated>2013-02-12T19:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/12/automatic-ctags-with-rubymotion-and-vim</id>
    <content type="html"><![CDATA[<p><a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> includes a <code>rake</code> task that generates <a href="http://ctags.sourceforge.net/whatis.html">Exuberant Ctags</a>. To generate tags, run the following in the root directory of a RubyMotion project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake ctags
</span></code></pre></td></tr></table></div></figure>


<h4>Make Ctags Better With Automation</h4>

<p>Ctags make writing code more efficient. But we shouldn&#8217;t have to type <code>$ rake ctags</code> every time we create a new RubyMotion project. This article shows how to use a shell script to generate ctags automatically every time you create a new RubyMotion app.</p>

<!-- more -->


<h4>How Ctags Save Time</h4>

<p>Ctags can save you time. For example, when creating a new class called <code>HomeViewController</code> that inherits from <code>UIViewController</code>, typing the first view characters of the superclass will produce the drop-down shown below.
<img src="http://RayHightower.com/images/uiviewcontroller.png" align="center" width="800" height="433" title="ctags RubyMotion Vim" alt="ctags RubyMotion Vim"></p>

<p>RubyMotion&#8217;s implementation of ctags includes support for built-in iOS classes like UIViewController. The code completion and drop-downs offered by ctags will reduce keystrokes and errors, freeing the developer to focus on solving harder problems.</p>

<h4>Creating the Script</h4>

<p>Here&#8217;s the script. You can use any name that suits you. My script is called <code>mmotion.command</code> (with two m&#8217;s at the beginning to distinguish it from the standard <code>motion</code> command) and it&#8217;s in the <code>~/bin/</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># Create a RubyMotion app, change into the app&#39;s directory, and run ctags.</span>
</span><span class='line'><span class="c"># Written by Raymond T. Hightower on February 12, 2013</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Creating a new RubyMotion app called:&quot;</span> <span class="nv">$1</span>
</span><span class='line'>motion create <span class="nv">$1</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$1</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Creating ctags for the new RubyMotion app...&quot;</span>
</span><span class='line'>rake ctags
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Opening the new app in Vim...&quot;</span>
</span><span class='line'>mvim .
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;To use the RubyMotion console, cd into the new directory:&quot;</span> <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of the work is done by by four lines. The remaining lines are comments or &#8216;echos&#8217; that tell the user what&#8217;s happening while the script is running.</p>

<h4>Running the Script</h4>

<p>If <code>~/bin/</code> is in the <code>$PATH</code>, you can run the script with the following line command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mmotion.command <span class="o">[</span>app name<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we can still do better by leveraging the power of aliases in <code>~/.bash_profile</code>.</p>

<h4>Adding an Alias to ~/.bash_profile</h4>

<p>Dropping an alias into <code>~/.bash_profile</code> streamlines the process even more. You can use any alias you want as long as it doesn&#8217;t confilct with another command. Here&#8217;s what my alias looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">mmotion</span><span class="o">=</span><span class="s2">&quot;mmotion.command&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Taking the Script for a Spin</h4>

<p>Now we can build a new RubyMotion app called <code>NewApp</code> with these results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/RubyMotion<span class="nv">$ </span>mmotion NewApp
</span><span class='line'>Creating a new RubyMotion app called: NewApp
</span><span class='line'>    Create NewApp
</span><span class='line'>    Create NewApp/.gitignore
</span><span class='line'>    Create NewApp/Rakefile
</span><span class='line'>    Create NewApp/app
</span><span class='line'>    Create NewApp/app/app_delegate.rb
</span><span class='line'>    Create NewApp/resources
</span><span class='line'>    Create NewApp/spec
</span><span class='line'>    Create NewApp/spec/main_spec.rb
</span><span class='line'>Creating ctags <span class="k">for </span>the new RubyMotion app...
</span><span class='line'>Opening the new app in Vim...
</span><span class='line'>To use the RubyMotion console, <span class="nb">cd </span>into the new directory: NewApp
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/RubyMotion<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>After the bash script ends, it lands in the directory from which it was originally run, no matter what directories it changed to during execution. This script will open the new app in Vim when it&#8217;s done.</p>

<p>From here, you can <code>$ cd NewApp</code> and type <code>rake</code> to run the app in the iOS simulator.</p>

<h4>Feedback Welcome</h4>

<p>If you notice any glitches with this approach, feel free to send me a &#8220;heads up&#8221; via the <a href="http://RayHightower.com/contact/">contact</a> form on this site or in the blog comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Vast and Endless Sea]]></title>
    <link href="http://RayHightower.com/blog/2013/01/17/the-vast-and-endless-sea/"/>
    <updated>2013-01-17T13:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/17/the-vast-and-endless-sea</id>
    <content type="html"><![CDATA[<p>All of us are inspired when we have a big goal to achieve. Antoine De Saint-Exupery expresses the idea well:</p>

<blockquote><p>If you want to build a ship, don’t drum up the people to gather wood, divide the work and give orders. Instead, encourage them to yearn for the vast and endless sea.</p></blockquote>

<p>2013 is already proving to be an exciting year. Looking forward to more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Use Vim]]></title>
    <link href="http://RayHightower.com/blog/2013/01/12/why-i-use-vim/"/>
    <updated>2013-01-12T11:07:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/12/why-i-use-vim</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/vim-osx.png" width="300" height="257" alt="Vim on OSX" title="Vim on OSX" align="right"/>
My primary code-writing tools are:</p>

<ul>
<li><a href="https://developer.apple.com/xcode/">Xcode</a> for Objective-C.</li>
<li><a href="http://code.google.com/p/macvim/">Vim</a> for Ruby, <a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>, and everything else.</li>
</ul>


<p>Here are my reasons for using Vim, in priority order:</p>

<!--more-->


<ol>
<li><p>Vim is everywhere. I can find Vim on any &#39;nix-based machine: Unix, Linux, or OSX. I spend most of my time on OSX and the Ubuntu distribution of Linux. When I started experimenting with <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a>, it was pleasant to know that Vim was already there. Having a common editor on multiple platforms makes it easier to bounce between them.</p></li>
<li><p>Vim has history. I tried TextMate when I first heard about Ruby. Questions about TextMate&#8217;s future caused me to look for an alternative. Vim&#8217;s 20-year history and the <a href="http://www.vim.org/community.php">Vim community</a> convinced me that the editor would be available for many years to come.</p></li>
<li><p>Vim is fast. I laughed out loud the first time I saw<br/>
<code>NERDTree: Refreshing the root node.</code><br/>
<code>This could take a while… DONE</code><br/>
because it happened so quickly.</p></li>
<li><p>Vim can be customized. If I want to tailor Vim for myself, I can do that through plugins and <code>.vimrc</code>. If I don&#8217;t want to configure it myself, I can use a tool like <a href="https://github.com/carlhuda/janus">Janus</a> by Carl Lerche and Yehuda Katz . You may choose a different course. Choices are powerful!</p></li>
</ol>


<p>The developers I admire are always learning. More important: They are strategic about what they learn because learning takes time. Being productive with a highly available editor like Vim means that I don&#8217;t have to spend time learning a new editor. Instead, I can focus my education in areas that benefit clients directly. That&#8217;s why I use Vim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Pilot for Xcode Navigation]]></title>
    <link href="http://RayHightower.com/blog/2013/01/08/code-pilot-for-Xcode-navigation/"/>
    <updated>2013-01-08T10:54:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/08/code-pilot-for-Xcode-navigation</id>
    <content type="html"><![CDATA[<p><a href="http://codepilot.cc">Code Pilot</a> is a free tool that lets developers navigate quickly between files in Xcode. I was introduced to the tool yesterday by Don Bora, instructor of the Mobile Makers <a href="http://mobilemakers.co/">iOS Accelerated</a> course that I&#8217;m currently taking.</p>

<h4>Starting Code Pilot</h4>

<p>After downloading and installing the product, launch Code Pilot by starting Xcode and using the SHIFT-COMMAND-X key sequence.</p>

<p><img src="http://RayHightower.com/images/nine-days-left.png" align="center" height="494" width="630" alt="Code Pilot w/o License" title="Code Pilot w/o License"></p>

<p>Code Pilot is free, but you still need to request and install the license file.</p>

<!--more-->


<h4>Installing the License</h4>

<p>It wasn&#8217;t immediately obvious to me where to put the license file. A quick email to Code Pilot&#8217;s tech support team got me an answer. This post may save you some time if you decide to try Code Pilot for yourself.</p>

<p>In Xcode, go into preferences (Xcode | Preferences). One section of the preference pane is devoted to Code Pilot. Go to that section, paste in the license, and you&#8217;re all set.</p>

<p><img src="http://RayHightower.com/images/paste-license.png" align="center" height="483" width="630" alt="Code Pilot preferences in Xcode" title="Code Pilot preferences in Xcode" ></p>

<h4>First Impression of Code Pilot</h4>

<p>I can see how the tool could make Xcode navigation faster. One drawback: As a Vim user, I&#8217;m in the habit of navigating with h, j, k, and l. Code Pilot requires me to use the arrow keys. If Code Pilot came equipped with Vim key bindings, I would view that as a plus!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leap Motion: Advanced User Interface]]></title>
    <link href="http://RayHightower.com/blog/2013/01/07/leap-motion-advanced-user-interface/"/>
    <updated>2013-01-07T11:56:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/07/leap-motion-advanced-user-interface</id>
    <content type="html"><![CDATA[<p><a href="https://leapmotion.com/">Leap Motion</a> is a small device that lets users control their computers with simple hand gestures. The Leap Motion controller senses individual hand and finger movements. This is not a touch interface, because your hands never touch anything.</p>

<p>WisdomGroup is a member of the Leap Motion Developer Program. Check out this 1-minute video.</p>

<center><iframe name="leapmotion" width="560" height="315" src="http://www.youtube.com/embed/_d6KuiuteIA?rel=0" frameborder="0" allowfullscreen></iframe></center>




<!--more-->


<h4>Why Leap Motion?</h4>

<p>Computers became easier to use when the mouse grew popular in the 1980s. Touchscreens offer another solution for the interaction riddle. The Leap Motion controller looks like another solution.</p>

<p>It&#8217;s still very early for Leap Motion. New applications will be born through this device. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Provisioning Profiles]]></title>
    <link href="http://RayHightower.com/blog/2012/12/26/rubymotion-provisioning-profiles/"/>
    <updated>2012-12-26T20:46:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/26/rubymotion-provisioning-profiles</id>
    <content type="html"><![CDATA[<p><em>Note: This article on provisioning profiles was first posted in the <a href="https://groups.google.com/forum/?fromgroups=#!topic/rubymotion/Nvo8dH_8rkI">RubyMotion Google Group</a> on May 10, 2012. It was also referenced on <a href="http://stackoverflow.com/questions/13539743/rubymotion-build-error-cant-find-a-provisioning-profile-named-mixios-tea">Stack Overflow</a>.</em></p>

<p>Everything with RubyMotion worked great until I tried to run the sample apps on a physical device. And then I had to spend a few hours wrestling with provisioning profiles. Hopefully this post will save time for somebody else.</p>

<!-- more -->


<p>In order to successfully run a RubyMotion app on a non-jailbroken iPhone 3GS (via <code>$ rake device</code>) I had to:</p>

<ul>
<li>Delete all of the expired provisioning profiles in the Mac OS X Keychain Access app. Yeah, my past is littered with many random experiments :-)</li>
<li>Explicitly set the path to my provisioning profile in the rakefile for the app (the defaults didn&#8217;t work for me).</li>
<li>Explicitly set the name of my codesign_certificate.</li>
</ul>


<p>The default &#8220;iOS Team Profile&#8221; didn&#8217;t work for me. I had to set explicit values in my rakefile for the app. Here&#8217;s my rakefile for the <a href="https://github.com/HipByte/RubyMotionSamples/tree/master/Tweets">&#8216;Tweets&#8217; sample app</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;/Library/RubyMotion/lib&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;motion/project&#39;</span>
</span><span class='line'><span class="no">Motion</span><span class="o">::</span><span class="no">Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span> <span class="c1"># Use `rake config&#39; to see complete project settings. </span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Tweets&#39;</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">provisioning_profile</span> <span class="o">=</span> <span class="s1">&#39;/Users/[username]/Library/ MobileDevice/Provisioning Profiles/[string-of-numbers].mobileprovision&#39;</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">codesign_certificate</span> <span class="o">=</span> <span class="s1">&#39;iPhone Developer: John Q Developer (A5QZ9QF4Z1)&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, my name isn&#8217;t &#8220;John Q Developer&#8221;, but you get the idea. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix for Ruby Developers]]></title>
    <link href="http://RayHightower.com/blog/2012/12/24/unix-for-ruby-developers/"/>
    <updated>2012-12-24T16:50:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/24/unix-for-ruby-developers</id>
    <content type="html"><![CDATA[<p><a href="http://workingwithunixprocesses.com/"><img src="http://RayHightower.com/images/working-w-unix-processes.jpg" align="right" width="350" height="266"></a>
It is gratifying to know that learning something tangentially related to Ruby will, in fact, teach me more about Ruby.</p>

<p><a href="http://workingwithunixprocesses.com/"><em>Working With Unix Processes</em></a>, by Jesse Storimer, is ostensibly about Unix internals. However, in reading this book, I have become more aware of how executables run on my favorite family of operating systems, which in turn gives me more insight into Ruby.</p>

<h3>Passing Arguments</h3>

<p>For example, what happens when we pass arguments to a process, Ruby or otherwise? How do the arguments get there? Storimer offers a 1-line Ruby program called <code>argv.rb</code> that we can use to play with the ARGV array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;p ARGV&#39;</span> &gt; argv.rb
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ruby argv.rb what results can we expect here
</span><span class='line'><span class="o">[</span><span class="s2">&quot;what&quot;</span>, <span class="s2">&quot;results&quot;</span>, <span class="s2">&quot;can&quot;</span>, <span class="s2">&quot;we&quot;</span>, <span class="s2">&quot;expect&quot;</span>, <span class="s2">&quot;here&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Once we have our hands on the ARGV array, we can parse it and manipulate it at will.</p>

<h3>Grokking Forks</h3>

<p>The section on forks contains a lot of mind-bending fun. The author offers some code to explain how forks work, but some concepts are only understandable when we write our own code. I had to write my own in order to raise my comfort level with forks.</p>

<p>Here&#8217;s what the code does:</p>

<ul>
<li>In the parent process, <code>fork</code> returns the <code>pid</code> of the child process.</li>
<li>In the child process, <code>fork</code> returns <code>nil</code>.</li>
<li>Therefore, the <code>if</code> block should be executed by the parent process&#8230;</li>
<li>&#8230;and the <code>else</code> block should be executed by the child process.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Parent process pid (before fork) is </span><span class="si">#{</span><span class="no">Process</span><span class="o">.</span><span class="n">pid</span><span class="si">}</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">fork</span>
</span><span class='line'>  <span class="n">current_process</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'>  <span class="n">parent_process</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">ppid</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;Entered the *if* block during Process </span><span class="si">#{</span><span class="n">current_process</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">The parent of this process is </span><span class="si">#{</span><span class="no">Process</span><span class="o">.</span><span class="n">ppid</span><span class="si">}</span><span class="s2">, which should be bash.</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">current_process</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'>  <span class="n">parent_process</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">ppid</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;Entered the *else* block during Process </span><span class="si">#{</span><span class="n">current_process</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">The parent of this process is </span><span class="si">#{</span><span class="n">parent_process</span><span class="si">}</span><span class="s2">, which should be the original of this process.</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the above Ruby code produces the following results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ruby forking_around.rb
</span><span class='line'>Parent process pid <span class="o">(</span>before fork<span class="o">)</span> is 79703.
</span><span class='line'>Entered the *if* block during Process 79703.
</span><span class='line'>The parent of this process is 76751, which should be bash.
</span><span class='line'>
</span><span class='line'>Entered the *else* block during Process 79704.
</span><span class='line'>The parent of this process is 79703, which should be the original of this process.
</span></code></pre></td></tr></table></div></figure>


<p>Digging further: Let&#8217;s look at the names that correspond to our
<code>pids</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ps -p 79703
</span><span class='line'>  PID TTY           TIME CMD
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ps -p 79704
</span><span class='line'>  PID TTY           TIME CMD
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>ps -p 76751
</span><span class='line'>  PID TTY           TIME CMD
</span><span class='line'>76751 ttys003    0:00.40 -bash
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps/sandbox<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>We get zero data for the <code>pids</code> 79703 and 79704 because those processes terminated with the program <code>forking_around.rb</code>. However, 76751 shows <code>bash</code> because bash is still running.</p>

<p>The book is full of rich playground examples that go much deeper than this. Time slips away when I get rolling with this stuff!</p>

<h3>Errata Handling</h3>

<p>The book is new so you can expect a few typos. If you run into problems with sample code, a quick Google search will lead you to the corrected text. For example, early in the book I had problems with a command that returns the maximum number of processes allowed on a system. Turns out there was a typo, and <a href="http://forums.pragprog.com/forums/261/topics/11191">the correction</a> was posted by the author himself on the publisher&#8217;s errata page.</p>

<h3>Conclusion</h3>

<p>I enjoyed reading <em>Working With Unix Processes</em> because it replaces a belief in &#8220;the magic of Unix&#8221; with a sound understanding of Unix fundamentals. The book is clear and brief with plenty of examples. The author assumes that readers have at least a basic understanding of Ruby. After that, you only need a command line, IRB, and the willingness to explore.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Makers, Objective-C, and RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion/"/>
    <updated>2012-12-14T06:45:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/ipad-iphone.jpg" width="256" height="250" alt="iPad iPhone" title="iPad iPhone" align="right">
This week I enrolled in the iOS Accelerated course offered by the <a href="http://mobilemakers.co/ios-accelerated">Mobile Makers Academy</a>. If you would like to do the same, mention my name and we&#8217;ll both receive a $300 discount on tuition.</p>

<p>Class starts on Jan 7, 2013. The evening lectures are convenient for those who serve clients by day.</p>

<p>Of course, a tuition discount and easy schedule are poor reasons to enroll in a course. This article will describe my reasons for enrolling. If your thirst for learning is anything like mine, you might like Mobile Makers too.</p>

<!--more-->


<h4>Background and Expectations</h4>

<p>My background includes an undergrad degree in computer science. Over the years, I&#8217;ve coded in C, Lisp, Fortran, Pascal, x86 assembler, and Ruby. I became a &#8220;business guy&#8221; when I launched WisdomGroup eighteen years ago. WisdomGroup is fortunate to have a team of strong technologists who keep our clients happy while teaching me more every day.</p>

<p>In late 2011, I began to focus on sharpening my personal technical skills, and that led to my immersion in <a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> this year. I expect the Mobile Makers experience to strengthen my grasp of Objective-C, OO theory, and iOS. Cross-training with Objective-C will boost my RubyMotion skills as well.</p>

<h4>Instruction Format</h4>

<p><a href="https://twitter.com/dbora">Don Bora</a> is the head instructor at Mobile Makers. Don is embarrassed when I say this, but he&#8217;s the main reason why I chose to enroll. Don is a true polyglot programmer, with a background that includes Objective-C (of course!), C#, Java, Ruby, and Smalltalk among other languages. He currently builds Objective-C apps for his clients at <a href="http://eightbitstudios.com/">Eight Bit Studios</a>. Don holds degrees in computer science and linguistics.</p>

<p>Mobile Makers offers a learning format that is relatively new to me. Beyond the traditional classroom lectures, students get plenty of time for lab immersion and interaction with mentors. I first witnessed this format when Neal Sales-Griffin and Mike McGee launched <a href="http://starterleague.com">The Starter League</a>.</p>

<h4>More About Lab Time and Mentorship</h4>

<p>Classroom sessions are fine, but they&#8217;re not enough. Can you learn a musical instrument by listening to lectures and taking notes? Mastering a skill like software development requires deliberate practice with challenging exercises. Learning is accelerated when lectures, labs, and mentorship complement each other.</p>

<h4>Learning Architecture</h4>

<p>Behind the scenes, Adam Lupu is the learning architect who designed the Mobile Makers curriculum. In Don&#8217;s words: &#8220;I know how to explain things, but I don&#8217;t know how to structure a course. That&#8217;s where Adam comes in.&#8221; Adam was the lead architect behind the Rails-based curriculum at the Starter League. Now he&#8217;s building the mobile curriculum at Mobile Makers.</p>

<h4>Excitement</h4>

<p>The Mobile Makers <a href="http://mobilemakers.co/ios-accelerated">iOS Accelerated</a> class is only three weeks away. If you mention this blog post, you and I will both get a $300 tuition discount. More important, we will acquire skills that will serve us well as we solve problems for clients. What an exciting time to be a developer!</p>
]]></content>
  </entry>
  
</feed>
